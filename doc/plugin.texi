@comment $Id: plugin.texi,v 1.11 2001/04/27 13:02:37 richi Exp $

@node Plugin Interface, GLAME Database Interface, GLAME Project Structure Management, Top
@chapter Plugin Interface 

The plugin interface is very simple. There are actually two functions,
one to add paths to the existing plugin path list and one to query the
handle of a plugin.

@deftypefun int plugin_add_path (const char *@var{path})
This function will add @var{path} to the list of paths used to search
plugins.
@end deftypefun

@tindex plugin_t
@deftypefun int plugin_load (const char *@var{filename})
@code{plugin_load()} will try to register all available plugins
out of the specified file @var{filename}. If the specified file
could not be opened or is not a valid plugin file, -1 is returned.
On success, that is after registering zero or more plugins, 0 is
returned.
@end deftypefun

@tindex plugin_t
@deftypefun {plugin_t *} plugin_get (const char *@var{name})
This function will return a handle to the plugin with the name @var{name}.
If the plugin is not already loaded it will be loaded from one of the
paths in the path list. @code{plugin_get()} returns @code{NULL} if the plugin
can't be found or an error occured during its initialization phase.
@end deftypefun

To manually add a plugin not contained in some shared library you
should call the following function.

@deftypefun {plugin_t *} plugin_add (const char *@var{name})
This function will add a new empty plugin to the database. You should
populate its database using the @code{plugin_set()} function. On success
a plugin handle is returned, @code{NULL} is returned on failure.
@end deftypefun

To access parts of the plugin the following wrapper macros should be used
on the @code{plugin_t} handle.

@tindex plugin_t
@deftypefun {const char *} plugin_name (plugin_t *@var{p})
This function returns the plugin's name.
@end deftypefun

@tindex plugin_t
@deftypefun int plugin_set (plugin_t *@var{p}, const char *@var{key}, void *@var{val})
@deftypefunx {void *} plugin_query (plugin_t *@var{p})
Using these functions you can set and query key/value pairs either stored
through dynamic library symbols or through a little per plugin database.
@code{plugin_query()} returns @code{NULL}, if there is no information about
the specified key. As a general rule of dumb you should start your keywords
with a '!' to prevent conflicts with dynamic symbols.
Standard keywords are accessible using the defines @code{PLUGIN_DESCRIPTION},
@code{PLUGIN_PIXMAP}, @code{PLUGIN_CATEGORY} and the internally used
keywords @code{PLUGIN_FILTER} and @code{PLUGIN_PARENT}.
@end deftypefun

To browse through all registered plugins you can use the following function.

@deftypefun {plugin_t *} plugin_next (plugin_t *@var{p})
@code{plugin_next()} gets you the next plugin in the database or the
first one if you supply @code{NULL}. @code{NULL} is returned if no
further plugins are available.
@end deftypefun


If you want to create a plugin, your dynamic object should contain the
following standard symbols with the described information attached. The
targeted subsystem may require additional defined symbols. Please refer
to the subsystems' documentation for information about those symbol
names and required contents. You should substitute the plugins name for
the @code{plugin} prefix of the symbols to prevent symbol name clashes.

@table @code
@item plugin_register
A function of type @code{(int (*)(plugin_t *p))} which does everything
necessary to register anything in the plugin to any subsystem.
@item plugin_set
This optional symbol of the type @code{char *} should contain a list
of additional @code{plugin} names inside the object file seperated
by spaces. You will need a seperate @code{_register} symbol for each
of the specified additional plugin names. Use the @code{PLUGIN_SET}
macro to create a symbol like that. Provide two arguments, the first
should be an identifier matching the file name without filename extension,
the second one should be the space seperated plugin list string.
@end table

