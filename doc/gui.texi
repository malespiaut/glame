@comment $Id: gui.texi,v 1.6 2001/04/12 09:45:08 richi Exp $

@node Graphical Frontend, Console Frontend, Copying, Top
@chapter Graphical Frontend (glame)

The graphical frontend is called @code{glame} and either reachable
from your path (where you installed glame to) or from @code{src/gui/glame}
which you should call if you didnt install glame but are executing it
out of the compiled source tree. Be sure to reside in the @code{src}
directory in this case, so GLAME can find its plugins.

The graphical frontend consists of three parts, the main window that is
active at the beginning and the wave editor and the filternetwork editor
that can be activated later. GLAME is very intuitive at the moment, so
just try pressing the right mouse button and context sensitive menus
will pop up with items with very descriptive names.

@menu
* The Main Window::
* The Wave Editor::
* The Filternetwork Editor::
@end menu



@node The Main Window, The Wave Editor, , Graphical Frontend
@section The Main Window

After startup you will be presented with an usual gnome application window
that contains a tree view of the swapfile currently in use. You may configure
the swapfile location by opening the preferences window out of the settings
menu. Note that you need to restart glame to apply the change. The default
location for the swapfile is @code{~/.glameswap}.

To start working from an empty swapfile you can create new toplevel nodes
by issuing Project/New Project. This inserts a new group into the tree.
On such operations a new item pops up as an edit field where you may change
the name of the group. Double-clicking on an item later also allows you
changing the name.

To groups you may now import files or export them as files. Operations on
groups and items are done through a context menu which you can pop up
using the right mousebutton. A brief description of the operations follow.

Operations on groups

@code{Edit} pops up a wave view widget containing all items of the group
where you can operate on them. Subgroups are not allowed by this operation.

@code{Add group...} adds a new group to the current group.

@code{Merge with parent} moves all the currents groups childs up one level
and deletes the current group.

@code{Delete} deletes the current group and all its items.

@code{Link selected} links the selected item into the current group. Linking
means that if you change the link, you change the original, too.

@code{Copy selected} copies (COW) the selected item into the current group.
COW means that if you change the copy, you do not change the original.

@code{Import...} imports a to be specified file as subgroup into the current
group.

@code{Export...} exports all children of the group as f.i. a wav file. Subgroups
are not allowed in this operation.

Operations on items

@code{Edit} pops up a wave view widget where you can operate on the item.

@code{Export...} exports the current item as f.i. a wav file.

@code{Delete} deletes the current item.


@node The Wave Editor, The Filternetwork Editor, The Main Window , Graphical Frontend
@section The Wave Editor

The wave editor is opened by applying the @code{Edit} function to either a
group or a single item. Editing is done on all items at once. All editing
and exploring functions can be reached through the right mouse button menu.

You can explore the wave by using the scrollbar and the items out of the
@code{View} menu which do what their names suggest.

Simple editing can be done by the usual @code{Cut}, @code{Copy}, @code{Paste}
and @code{Delete} operations which operate on the current selection in the
active wave widget. You can cut and paste between different wave widgets,
if the number of channels match. You can operate on multiple views of the
same wave at once, they will be kept in sync automatically.

The @code{Apply filter} and @code{Apply custom} submenus allow you to apply
a preexisting filter to the actual selection or pop up a filternetwork editor
where you can construct a custom one. In the first case you will be prompted
for options of the selected filter.

The @code{Feed into filter} and @code{Feed into custom} submenus feed the
actual selection into the selected filter or a custom generated one (see
above), the wave is not modified. This is handy f.i. for a play operation,
simply use feed into audio_out.


@node The Filternetwork Editor, , The Wave Editor, Graphical Frontend
@section The Filternetwork Editor
The filternetwork editor is opened by either choosing the @code{Open Filternetwork Editor} 
item in the @code{Filternetwork} menu, or by using custom functions in the wave editor.
The filternetwork editor consists of a button bar on the bottom of the window, where
the created filternetwork can be executed, paused and stopped, and a main frame 
for connecting and adding new nodes to the network.

All functionality in the editing window is controlled by context sensitive menus bound
to the right mouse button. By clicking on empty space the general menu is opened, letting 
You @code{Add Nodes...}, load additional plugins and saving and loading filternetworks.
Nodes are organized in categories, for faster finding of the desired nodes.

When a new node is added a small box appears in the editing area, depicting this node.
The box has input ports (if available) on the left side of the icon, and output ports
on the right side. If no ports of a type are available the port is grayed out.

The icon in the middle of the box has context menus for manipulating parameters of the
underlying filter node. 

To connect to nodes, click on the output port using the left mouse button and drag the 
pipe to the desired input port. If a connection is possible a pipe connection will be drawn.
To manipulate per-pipe parameters of the connected nodes a context menu is attached to the
small black ball placed in the middle of the pipe.

Finally if You hover over an icon or port for a little while the actual parameter settings
are drawn and the node is raised to the top.
The timeout for the hovering can be adjusted in the preferences window.

After drawing your desired network it can be started with the @code{play} button. If 
anything is not set up correctly the malicious node will be drawn in red and the
error is drawn when hovering over it.

