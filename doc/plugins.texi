@comment $Id: plugins.texi,v 1.23 2001/04/27 13:27:17 richi Exp $

@node Plugin Collection, Filter API, Console Frontend, Top
@chapter Plugin Collection

@comment TODO: Which index should I list the plugins in?

Available GLAME plugins are listed here with a short description about what
they are able to do, their input and output ports, and the parameters 
they understand. Some ports allow more than one so-called pipe to be
connected. Those restrictions will be listed in the port description. 
Some parameters can be set per plugin, some per pipe. Pipe parameters are
listed with the name of the pipe preceeding the parameter name, separated
by a double colon, like @code{out::position} for parameter @code{position}
on pipe @code{out}. Each parameter is followed by its type--e.g. integer,
float, or string--in parentheses.

@menu
* In- and Output::
* Elementary Plugins::
* Effects::
* FFT Plugins::
@end menu

@node In- and Output, Elementary Plugins,, Plugin Collection
@section In- and Output

GLAME has several ways of importing and exporting audio data: via the
sound card, an external file, or an external program. Furthermore, GLAME
has its own so-called swapfile that is used as a large internal cache for
audio data.

@menu
* Audio I/O::
* File I/O::
* Swapfile I/O::
* Abusing External Apps::
@end menu

@node Audio I/O, File I/O,, In- and Output
@subsection Audio I/O

The @file{audio-in} and @file{audio-out} plugins handle communication between 
GLAME and the sound hardware. @file{audio-in} is for recording, 
@file{audio-out} does the playback. 
Actually, there are several instances of those plugins for different sound
systems like ESD, ALSA, OSS, and native SGI. If available on the system, 
they can be accessed directly via @file{oss-audio-out}, @file{esd-audio-in} 
and the like, using the same sets of parameters. Think of @file{audio-in} and 
@file{audio-out} as sane default methods dependent on the system's capabilities.
Those defaults can be configured via the GUIs preferences dialog, too.

@subsubheading Common parameters
@table @code
@item device (string)
Sound device to be used. Note: While audio-in and audio-out are generic plugins,
interpretation of the device parameter is dependent on the underlying sound
system which the value is passed to unmodified. For example, OSS takes devices
parameters like @file{/dev/dsp} where ALSA would like @code{0:0}. If
@code{device} is not set, the sound system's default device is used.
@end table

@subsubheading @file{audio-in} ports
@table @code
@item out (output)
Recorded stream of sample data. Maximum number of allowed out-connections 
depends on hardware capabilities.
@end table

@subsubheading @file{audio-in} parameters
@table @code
@item rate (integer)
The sample rate in Hertz.
@item duration (float)
Recording time in seconds. Defaults to no limit.
@item out::position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table

@subsubheading @file{audio-out} ports
@table @code
@item in (input)
Sample stream to play back. Maximum number of allowed in-connections
depends on hardware capabilities.
@end table

@file{audio-out} has no further specific parameters.


@node File I/O, Swapfile I/O, Audio I/O, In- and Output
@subsection File I/O
Transactions from and to files are handled by the plugins @file{read-file}
and @file{write-file}. @file{read-file} is guaranteed to be able to read
WAV files. Anything else is up to helper libraries that may or may not be
installed on a system. @file{write-file} so far only second guesses the
desired output format from the suffix of the given filename.

@subsubheading Common parameters
@table @code
@item filename (string)
Name of the file to be read from or written to. The writer takes the
filename suffix as a hint to the desired type of output. The 
@code{filename} parameter has no default and is required to be set.
@end table

@subsubheading @file{read-file} ports
@table @code
@item out (output)
Sample data read in from a sound file. The number of allowed out-connections
varies from file to file.
@end table

@subsubheading @file{read-file} parameters
@table @code
@item out::position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table

@subsubheading @file{write-file} ports
@table @code
@item in (input)
Sample stream to store to a sound file. Maximum number of allowed in-connections
depends on the desired sound format.
@end table

@file{write-file} has no further specific parameters.

@node Swapfile I/O, Abusing External Apps, File I/O, In- and Output
@subsection Swapfile I/O

The two plugins @file{swapfile-in} and @file{swapfile-out} are for streaming
a swapfile into the network and storing a stream into the swapfile
respectively. Both refer to tracks via a track group identifier and a track 
identifier.

@subsubheading Common parameters
@table @code
@item group (string)
Track group identifier. This parameter is required to be set and there is
no default value.
@item track (string)
Track identifier. This parameter is required to be set and there is
no default value.
@item offset (int)
This parameter denotes the offset inside the file to start readin/writing
from. The default is -1 which denotes the start of the file (and truncation
of the file, if its swapfile_out).
@item size (int)
This parameter denotes the number of samples to read/write. The default
is -1 which means to read the whole file / write all data.
@end table

@subsubheading @file{swapfile-in} ports
@table @code
@item out (output)
Sample stream coming out of the swapfile.
@end table

@file{swapfile-in} has no further specific parameters.

@subsubheading @file{swapfile-out} ports
@table @code
@item in (input)
Sample stream to be stored in the swapfile.
@end table

@file{swapfile-out} has no further specific parameters.

@node Abusing External Apps,, Swapfile I/O, In- and Output
@subsection Abusing External Apps

This hackish filter allows to stream data coming from an external
program that communicates through unix pipes. Note that at the
moment neither @code{pipe-in} nor @code{pipe-out} seem to work
reliably, but fail inside libc.

@subsubheading Common parameters
@table @code
@item cmd (string)
Command string of the program which should be launched. This parameter is 
required to be set and there is no default value.
@item tail (string)
Extra tail to be appended to the command string, usually a filename. It
defaults to an empty string.
@end table

@subsubheading @file{pipe-in} ports
@table @code
@item out
Streams created out of the (possible interleaved) data coming from the
external program. You have to ensure to connect two pipes if the external
program generates stereo output. Dataformat is signed 16 bit in 
native endianness only.
@end table

@subsubheading @file{pipe-in} parameters
@table @code
@item rate
Sample rate of the data coming from the external program. Defaults to the
compile-time setting of @code{GLAME_DEFAULT_SAMPLERATE} which is 
usually 44100 Hz.
@end table

@subsubheading @file{pipe-out} ports
@table @code
@item out
Streams created out of the (possible interleaved) data coming from the
external program. You have to ensure to connect two pipes if the external
program generates stereo output. Dataformat is signed 16 bit in 
native endianness only.
@end table


@node Elementary Plugins, Effects, In- and Output, Plugin Collection
@section Elementary Plugins

@menu 
* Generating Waves::		Sound out of Nowhere
* Junctions and Dead Ends::	Splitting, mixing and merging
* Mangling Data Streams::	Shifting and rescaling
* Orientation::			Panning
* Arithmetics::			Adding and multiplying streams
* The Sample Analyst::		Sample statistics
* Catching Bugs::		Sending network pings
* How to Code::			Useless plugins
@end menu

@node Generating Waves, Junctions and Dead Ends,, Elementary Plugins
@subsection Generating Waves

GLAME comes with a number of plugins to generate waveforms within a 
filter network. They can be useful as a debugging aid, but also as 
control input to other plugins. Imagine a sine wave generator hooked up
to the position port of a panning filter... So far there is a 
@code{sine} plugin for generating sine waves, a @code{const} plugin yielding
a block of constant data, and a @code{rect} plugin creating a stream of
steep pulses. @code{pulse} generates a single pulse, steepness of the edges
can be adjusted. All plugins emit but a short
chunk of data. For a continuous stream they have to be connected to a
repeat node. 

@subsubheading Common ports
@table @code
@item out (output)
Generated data stream. Only one connection is allowed.
@end table

@subsubheading Common parameters
@table @code
@item position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@item rate (int)
Samplerate of generated data stream. Defaults to compile-time setting
of GLAME_DEFAULT_SAMPLERATE, usually 44100 Hz.
@end table

@subsubheading @file{const} ports
@file{const} has no further specific ports.

@subsubheading @file{const} parameters
@table @code
@item value (sample)
Constant signal value. Defaults to 0.
@end table

@subsubheading @file{sine} ports
@file{sine} has no further specific ports.

@subsubheading @file{sine} parameters
@table @code
@item amplitude (sample)
Amplitude of generated sine wave. Allowed value range is from 0 to 1. 
Defaults to 0.5.
@item frequency (float)
Frequency of generated sine wave in Hz. Defaults to 441 Hz.
@end table

@subsubheading @file{rect} ports
@file{rect} has no further specific ports.

@subsubheading @file{rect} parameters
@table @code
@item amplitude (sample)
Amplitude of generated rectangular wave. Allowed value range is from 0 to 1. 
Defaults to 1.0.
@item frequency (float)
Frequency of generated rectangular wave in Hz. Defaults to 440 Hz.
@end table

@subsubheading @file{pulse} ports
@file{pluse} has no further specific ports.

@subsubheading @file{pulse} parameters
@table @code
@item time_on (time)
Time to start switching from neutral to on state. Ignored if zero.
@item time_off (time)
Time to start switching from on to neutral state. Ignored if zero.
@item duration (time)
Length of complete output in milliseconds.
@item attack (time)
Time in milliseconds to switch from neutral to on state.
@item release (time)
Time in milliseconds to switch from on to neutral state.
@end table

@node Junctions and Dead Ends, Mangling Data Streams, Generating Waves, Elementary Plugins
@subsection Junctions and Dead Ends

In a filter network, data streams don't get created from nowhere, neither
do they disappear into a big black void: there must be a plugin at each
endpoint of a connection. These Plugins in turn are allowed to dump data or
create new streams.

The @file{drop} plugin is used as a sink for data that is no longer needed 
within the network. Any incoming data is simply discarded. It's the dead
end of a network.

If the same stream of data is needed more than once, it cannot simply be 
applied several times to different ports, it has to be duplicated first. 
@file{one2n} is the plugin to perform this task, it forks the network, so
to speak.

@file{mix} on the other hand acts as a junction and merges several data
streams into one, just like an ordinary mixing desk. The @file{mix} plugin
comes in two flavours, @file{mix}, and @file{mix2}. The only time to worry
about the differences is when you want to create loops in your network: 
@file{mix} drops all input data after the first input stream has terminated,
@file{mix2} continues to mix available inputs instead. Otherwise @file{mix}
and @file{mix2} are identical. Use @file{mix} for mixing feedback.

@subsubheading @file{drop} ports
@table @code
@item in (input)
Data to be dropped. Any number of input connections is allowed.
@end table

@file{drop} has no parameters.

@subsubheading @file{one2n} ports
@table @code
@item in (input)
Stream to be replicated.
@item out (output)
Replicated stream. Any number of output connections is allowed.
@end table

@file{one2n} has no parameters.

@subsubheading @file{mix} ports
@table @code
@item in (input)
Audio streams to be mixed. Any number of input connections is allowed.
@item out (output)
Mixed audio stream.
@end table

@subsubheading @file{mix} parameters
@table @code
@item in::gain (float)
Gain of the input. Defaults to 1.
@item in::offset (time)
Start mixing in input stream after relative time offset (in seconds). 
Defaults to 0.
@item gain (float)
Gain of the output stream. Defaults to 1.
@item position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table


@node Mangling Data Streams, Orientation, Junctions and Dead Ends, Elementary Plugins
@subsection Mangling Data Streams

All the plugins described in this section operate on a single input stream 
and transform it into a slightly mangled single output stream. 
@file{volume-adjust} scales the amplitude of a data stream. 
@file{delay} and @file{extend} prepend and append zero samples to a data
stream respectively. @file{repeat} resends an input sequence over and over
for a fixed time. @file{invert} inverts all data of the input stream, i.e. 
each sample A is replaced by -A.

The @file{fade} plugin is designed to fade in or fade out a specific region
in the swapfile. A generic support of this plugin by the gui is not existent
at the present time. A timeline view will be introduced later featuring
a volume envelope that will be applied to a track. To use the fade plugin
now just choose "Apply Custom" in the waveeditor gui. The filternetwork editor 
will pop up including a swapfile in and a swapfile out filter. Just enter the size
given by swapfile in into the size parameter of the fade filter.

@subsubheading Common ports
@table @code
@item in (input)
Stream of input sample data.
@item out (output)
Stream of transformed output sample data.
@end table

@subsubheading @file{invert} parameters
@file{invert} has no parameters.

@subsubheading @file{volume-adjust} parameters
@table @code
@item factor (float)
Value to scale input stream's amplitude with.
@end table

@subsubheading @file{fade} parameters
@table @code
@item mode (int)
Choose mode 0 to fade in, 1 to toggle fade out modus.
@item size (int)
The length in samples of the faded region. When using "Apply Custom" just take
the size given by the @file{swapfile-in} filter.
@end table

@subsubheading @file{delay} parameters
@table @code
@item delay (time)
Input data stream is prepended with zero samples for delay milliseconds.
Defaults to 0ms.
@end table

@subsubheading @file{extend} parameters
@table @code
@item time (time)
Zero samples are appended to input stream for delay milliseconds.
Defaults to 0ms.
@end table

@subsubheading @file{repeat} parameters
@table @code
@item duration (time)
The input pattern is repeated until a total time of duration seconds is
reached. Defaults to 0s.
@end table



@node Orientation, Arithmetics, Mangling Data Streams, Elementary Plugins
@subsection Orientation

The @file{pan} plugin distributes a mono sample stream to two stereo
(left/right) output streams. 

@subsubheading @file{pan} ports
@table @code
@item in (input)
Mono stream to pan. Only a single connection allowed.
@item left-out (output)
@item right-out (output)
Left/right stereo output stream. Only one connection per port is allowed.
@end table

@subsubheading @file{pan} parameters
@table @code
@item pan (float)
Pan value (virtual direction) of mono input stream. By default, @file{pan}
uses the input pipe's position property as pan value. It is overridden if
the @code{pan} parameter is set. Allowed values range from -pi/2 to pi/2. 
As the position property ranges from -pi to pi, values with magnitude 
larger than pi/2 (i.e. positions in the 'back') are mirrored to the front.
@end table

@node Arithmetics, The Sample Analyst, Orientation, Elementary Plugins
@subsection Arithmetics

The plugins @file{mul} and @file{add} perform a simple arithmetic operations
on several input streams. Basically, @file{mul} multiplies and @file{add}
sums up any number of input sample streams. Operations are performed
sample by sample--no check is performed whether sample rates match! 
If a stream is shorter than others, it is zero- (add) or one-padded (mul)
internally.

Each plugin allows one multiplicative and one additive constant to be
set. They are interpreted differently for each plugin however, 
reflecting the different algorithms:

@file{mul} calculates each output sample by taking one sample from each
input pipe, adding @code{add} to it, multiplying the results, and
finally multiplying the result by @code{factor}.

@file{add} calculates each output sample by taking one sample from each
input pipe, summing them all up, adding the @code{add} parameter, and
multiplying the result by @code{factor}.

@subsubheading Common ports
@table @code
@item in (input)
Input sample stream. Any number of input connections is allowed.
@item out (out)
Output sample stream of computed data. Only one connection is allowed.
@end table

@subsubheading Common parameters
@table @code
@item add (float)
Additive constant, see above. Defaults to zero.
@item factor (float)
Multiplicative constant, see above. Defaults to one.
@end table

There are neither further specific ports, nor further specific parameters.



@node The Sample Analyst, Catching Bugs, Arithmetics, Elementary Plugins
@subsection The Sample Analyst

Analyzing sample data for things like peak values or a DC offset is
crucial for tuning parameters right on other plugins. The @file{statistic}
plugin is kind enough to take the burden of calculating those values. Its
output is obviously not a stream of sample data, but of statistical
values called an RMS stream. Unfortunately, RMS work within GLAME is still
in its early stages, so currently there is only one simple test plugin,
@file{debugrms}, that can actually understand an RMS input stream and
prints some of the gathered statistics to the console. 

@subsubheading @file{statistic} ports
@table @code
@item in (input)
Input sample stream to be analyzed. Only one connection is allowed.
@item out (output)
RMS data stream of gathered statistical data. Only one connection is
allowed.
@end table

@subsubheading @file{statistic} parameters
@table @code
@item windowsize (time)
Time in milliseconds of window for a single chunk of RMS data.
@end table

@subsubheading @file{debugrms} ports
@table @code
@item in (input)
Input stream of RMS data to display.
@end table

@file{debugrms} has no parameters.



@node Catching Bugs, How to Code, The Sample Analyst, Elementary Plugins
@subsection Catching Bugs

Ping is a tool familiar to admins to test integrity and latency of a
network connection. The @file{ping} plugin does the same within a GLAME
filter network. It sends out a data packet from its output port and 
measures the time until the packet arrives at its input port. Obviously,
the filter network should have a loop structure or ping will wait 
endlessly for an input. Debugging output goes to the console.

@subsubheading @file{ping} ports
@table @code
@item in (input)
Input port packets are received at.
@item out (output)
Output port packets are sent from.
@end table

@subsubheading @file{ping} parameters
@table @code
@item cnt (integer)
Number of packets to send. Defaults to 10.
@item dt (integer)
Time in microseconds between successive packets. Defaults to 250000 
microseconds (1/4 second).
@item size (int)
Number of samples in a test packet. Defaults to 128 samples.
@end table



@node How to Code,, Catching Bugs, Elementary Plugins
@subsection How to Code

The @file{null} and @file{dup} plugins aren't really meant to be used,
they are simple reference implementations for developers looking for a
quick introduction to plugin programming. @file{null} passes an input
stream unmodified to its output, @file{dup} duplicates an input stream
to two output streams. In real life, the more complex @file{one2n}
plugin can be used to achieve the same results. So use the source, not 
these plugins. 



@node Effects, FFT Plugins, Elementary Plugins, Plugin Collection
@section Effects

@menu
* Echo::
* Noisegate::
* IIR::
* Flanger::
@end menu

@node Echo, Noisegate,, Effects
@subsection Echo

Guess what! The @file{echo} plugin adds an echo to an input stream.

@subsubheading @file{echo} ports
@table @code
@item in (input)
Stream of input sample data. Only one connection is allowed.
@item out (output)
Mixed stream of input and echoed data. Only one connection is allowed.
@end table

@subsubheading @file{echo} parameters
@table @code
@item time (time)
Delay time for echo in milliseconds. Defaults to 100 milliseconds.
@item mix (float)
Mix ratio of echoed to original stream. Defaults to 0.7.
@end table

@node Noisegate, IIR, Echo, Effects
@subsection Noisegate

A noisegate is used to suppress signals below a certain threshold from an
input stream. Its operation can be tuned by a number of parameters. 
When the input signal (its absolute value actually) falls below 
@code{threshold_on} for more than @file{hold} time, @file{noisegate}
suppresses output until the signal goes back up and above threshold_off.
Switching from and to zero output is usually not done instantaneously as this
would lead to distorted sound. Instead, a fading time can be given by
@code{attack} and @code{release} respectively. 

@subsubheading @file{noisegate} ports
@table @code
@item in (input)
@item out (output)
@end table

@subsubheading @file{noisegate} parameters
@table @code
@item threshold_on (float)
@item threshold_off (float)
On and off threshold for sample data between 0 and 1, see above. Default to 0.
A noisegating effect is only achieved if @code{threshold_on} is equal or less than
@code{threshold_off}.
@item hold (time)
Hold time in milliseconds, see above. Defaults to 0.
@item attack (time)
Attack time in milliseconds, see above. Defaults to 0.
@item release (time)
Release time in milliseconds, see above. Defaults to 0.
@end table

@node IIR, Flanger, Noisegate, Effects
@subsection IIR

IIR stands for Infinite Impulse Response. This effect makes it possible to
perform low/highpass filtering on a signal according to the simple recursive 
formula y[n]=a0*x[n] + a1*x[n-1] + ... + b0*y[n-1] + b1*y[n-2] + ...
The filter coefficients a0, a1, ..., b0, b1, ... are calculated via the 
Chebyshev scheme in the moment, but IIR will soon be replaced by different 
filters, all using the IIR method to provide band/notch/etc. filters.
For more detailed information about IIR and Chebyshev filters 
consult @url{http://www.dspguide.com}.

@subsubheading @file{iir} ports
@table @code
@item in (input)
Input stream of sample data. Only one connection is allowed.
@item out (output)
Output stream of filtered sample data. Only one connection is allowed.
@end table

@subsubheading @file{iir} parameters
@table @code
@item mode (integer)
Mode of operation. 0 specifies a low pass, 1 a high pass filter. Defaults 
to low pass.
@item poles (integer)
For Chebyshev filters, @code{poles} has to be a multiple of 2. 
Having more poles leads to better impulse response of the filter, i.e. 
the signal will drop faster around the cutoff frequency, but the filter will 
need longer to execute. Defaults to 2.
@item cutoff (float)
Specifies ratio of cutoff frequency divided by sample 
frequency. The maximum is half the sample frequency (Nyquist frequency!), 
therefore @code{cutoff} is valid only from 0 up to 0.5. Defaults to 0.1.
@item ripple (float)
@code{ripple} defines the percentage of ripple in the pass band. It defaults 
to 0.5, and it is best to leave it alone unless you know what you're doing.
@end table


@node Flanger, , IIR, Effects
@subsection Flanger
The flanger effect is essentially a variable delay, that operates on a comb
filtered signal. The variation of the delay is given by a low frequency
oscillation (LFO). Dependent on the type of LFO you get different effects. The
flanger is especially useful for guitar and voice sounds. With the right
settings this implementation of the flanger can be used as a detune effect using
a ramp up/down LFO and setting dry gain to zero.

@subsubheading @file{flanger} ports
@table @code
@item in (input)
Input stream of sample data. Only one connection is allowed.
@item out (output)
Output stream of processed sample data. Only one connection is allowed.
@end table

@subsubheading @file{flanger} parameters
@table @code
@item depth (float)
Size of the comb filter delay buffer in ms. A larger depth allows for a larger
sweep depth and more dramatic effects.
@item sweep depth (float)
Sweep depth gives the maximum oscillation amplitude of the LFO in ms and
thereby modifies the intensity of the effect. The maximum value it can take is
depth/2.
@item sweep rate (float)
Specifies the oscillation frequency for the LFO. Good values are between 0.5
and 10 Hz. Higher frequencies generate rather weird sounds.
@item dry gain (float)
This parameter modifies the amount of the original signal added to the output.
Setting this parameter to 0.0, you get the effect sound only.
@item effect gain (float)
This parameter modifies the amount of the effect signal added to the output.
@item feedback gain (float)
This parameter modifies the amount of dry signal taken from the middle tap of
the ringbuffer and added to the original sound, i.e. it controls the comb
filter.
@item LFO type (int)
At the present time you can choose between three different LFO types:
@table @code
@item 0
ramp up, generate a signal with higher frequency
@item 1
ramp down, generate a signal with lower frequency
@item 2 
sine wave, generates a sound sweeping up and down. Use for genuine flanger
sound.
@end table
@end table



@node FFT Plugins, , Effects, Plugin Collection
@section FFT Plugins

Glame provides a simple framework of FFT filters to allow for the application
of effects in the frequency domain of sample sounds. The core plugins
are fft and ifft using the specially designed FFT protocol which supports
adjustable FFT blocksizes and oversampling. All FFT processing is done
based on the fftw (@url{http://www.fftw.org}) library.

@menu
* FFT::
* IFFT::
* FFT Resample::
* FFT Bandpass::
* FFT Equalizer::
@end menu


@node FFT, IFFT,, FFT Plugins
@subsection fft
@subsubheading @file{fft} ports
@table @code
@item in (input)
Input stream of sample data. Only one connection is allowed.
@item out (output)
Output stream of fft data. Only one connection is allowed.
@end table

@subsubheading @file{fft} parameters
@table @code
@item blocksize (int)
This parameter sets the blocksize for the FFT. The higher the value the
better the frequency resolution of the transformation.
@item oversamp (int)
To enhance the time resolution of the signal and thereby the quality of the
resynthesized sound it is necessary to do oversampling. A good
factor is the default value of 8.
@end table

@node IFFT, FFT Resample, FFT, FFT Plugins
@subsection ifft
@subsubheading @file{ifft} ports
@table @code
@item in (input)
Input stream of fft data. Only one connection is allowed.
@item out (output)
Output stream of sample data. Only one connection is allowed.
@end table

@subsubheading @file{ifft} parameters
The ifft plugin doesn't need any parameters. blocksize and oversampling factor
are taken from the pipe properties.

@node FFT Resample, FFT Bandpass, IFFT, FFT Plugins
@subsection fft_resample
Implements a resampler in the frequency domain.
@subsubheading @file{fft_resample} ports
@table @code
@item in (input)
Input stream of fft data. Only one connection is allowed.
@item out (output)
Output stream of resampled fft data. Only one connection is allowed.
@end table

@subsubheading @file{fft_resample} parameters
@table @code
@item frequency (int)
Frequency of resampled stream.
@end table

@node FFT Bandpass, FFT Equalizer, FFT Resample, FFT Plugins
@subsection fft_bandpass
Implements a bandpass filter in the frequency domain.
@subsubheading @file{fft_bandpass} ports
@table @code
@item in (input)
Input stream of fft data. Only one connection is allowed.
@item out (output)
Output stream of processed fft data. Only one connection is allowed.
@end table

@subsubheading @file{fft_bandpass} parameters
@table @code
@item band minimum (float)
Minimum of passband in Hz.
@item band maximum (float)
Maximum of passband in Hz.
@item gain (float)
Gain in dB of passband.
@end table

@node FFT Equalizer, , FFT Bandpass, FFT Plugins
@subsection fft_equalizer
Implements a five band equalizer in the frequency domain. It features a low, midlow,
mid, midhigh and high band which are equally distributed over the frequency range.
This distribution is not really usable, but it's a proove of concept at the present
time..
@subsubheading @file{fft_equalizer} ports
@table @code
@item in (input)
Input stream of fft data. Only one connection is allowed.
@item out (output)
Output stream of processed fft data. Only one connection is allowed.
@end table

@subsubheading @file{fft_equalizer} parameters
@table @code
@item low (float)
Gain of low range band (not in dB)
@item midlow (float)
Gain of midlow range band (not in dB)
@item mid (float)
Gain of mid range band (not in dB)
@item midhigh (float)
Gain of midhigh range band (not in dB)
@item high (float)
Gain of high range band (not in dB)
@end table
