@comment $Id: plugins.texi,v 1.8 2000/04/05 23:49:44 nold Exp $

@node Plugin Collection, Filter API, Console Frontend, Top
@chapter Plugin Collection

@comment TODO: Which index should I list the plugins in?

Available GLAME plugins are listed here with a short description about what
they are able to do, their input and output ports, and the parameters 
they understand. Some ports allow more than one so-called pipe to be
connected. Those restrictions will be listed in the port description. 
Some parameters can be set per plugin, some per pipe. Pipe parameters are
listed with the name of the pipe preceeding the parameter name, separated
by a double colon, like @code{out::position} for parameter @code{position}
on pipe @code{out}. Each parameter is followed by its type--e.g. integer,
float, or string--in parentheses.

@menu
* In- and Output::
* Elementary Plugins::
* Effects::
@end menu

@node In- and Output, Elementary Plugins,, Plugin Collection

@menu
* Audio I/O::
* File I/O::
* Swapfile I/O::
* Abusing External Apps::
@end menu

@node Audio I/O, File I/O,, In- and Output
@subsection Audio I/O

The @file{audio-in} and @file{audio-out} plugins handle communication between 
GLAME and the sound hardware. @file{audio-in} is for recording, 
@file{audio-out} does the playback. 
Actually, there are several instances of those plugins for different sound
systems like ESD, ALSA, OSS, and native SGI. If available on the system, 
they can be accessed directly via @file{oss-audio-out}, @file{esd-audio-in} 
and the like, using the same sets of parameters. Think of @file{audio-in} and 
@file{audio-out} as sane default methods dependent on the system's capabilities.

@subsubheading Common parameters
@table @code
@item device (string)
Sound device to be used. Note: While audio-in and audio-out are generic plugins,
interpretation of the device parameter is dependent on the underlying sound
system which the value is passed to unmodified. For example, OSS takes devices
parameters like @file{/dev/dsp} where ALSA would like @code{0:0}. If
@code{device} is not set, the sound system's default device is used.
@end table

@subsubheading @file{audio-in} ports
@table @code
@item out (output)
Recorded stream of sample data. Maximum number of allowed out-connections 
depends on hardware capabilities.
@end table

@subsubheading @file{audio-in} parameters
@table @code
@item rate (integer)
The sample rate in Hertz.
@item duration (float)
Recording time in seconds. Defaults to no limit.
@item out::position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table

@subsubheading @file{audio-out} ports
@table @code
@item in (input)
Sample stream to play back. Maximum number of allowed in-connections
depends on hardware capabilities.
@end table

@file{audio-out} has no further specific parameters.


@node File I/O, Swapfile I/O, Audio I/O, In- and Output
@subsection File I/O
Transactions from and to files are handled by the plugins @file{read-file}
and @file{write-file}. @file{read-file} is guaranteed to be able to read
WAV files. Anything else is up to helper libraries that may or may not be
installed on a system. @file{write-file} so far only second guesses the
desired output format from the suffix of the given filename.

@subsubheading Common parameters
@table @code
@item filename (string)
Name of the file to be read from or written to. The writer takes the
filename suffix as a hint to the desired type of output. The 
@code{filename} parameter has no default and is required to be set.
@end table

@subsubheading @file{read-file} ports
@table @code
@item out (output)
Sample data read in from a sound file. The number of allowed out-connections
varies from file to file.
@end table

@subsubheading @file{read-file} parameters
@table @code
@item out::position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table

@subsubheading @file{write-file} ports
@table @code
@item in (input)
Sample stream to store to a sound file. Maximum number of allowed in-connections
depends on the desired sound format.
@end table

@file{write-file} has no further specific parameters.

@node Swapfile I/O, Abusing External Apps, File I/O, In- and Output
@subsection Swapfile I/O

TODO: track-in, track-out (track_io.c)

@node Abusing External Apps,, Swapfile I/O, In- and Output
@subsection Abusing External Apps

TODO: pipe-in (pipe.c)

@node Elementary Plugins, Effects, In- and Output, Plugin Collection
@section Elementary Plugins

TODO: mul, add (arithmetic.c), 
ping (debug.c), 
statistic, debugrms (rms.c), 
null, dup (tutorial.c)

*** Add them here first. Will move to new sections as appropriate. ***

@menu 
* Generating Waves::
* Junctions and Dead Ends::
* Mangling Data Streams::
* Orientation::
@end menu

@node Generating Waves, Junctions and Dead Ends,, Elementary Plugins
@subsection Generating Waves

GLAME comes with a number of plugins to generate waveforms within a 
filter network. They can be useful as a debugging aid, but also as 
control input to other plugins. Imagine a sine wave generator hooked up
to the position port of a panning filter... So far there are is a 
@code{sine} plugin for generating sine waves, and a @code{const}
plugin yielding a block of constant data. Both plugins emit but a short
chunk of data. For a continuous stream they have to be connected to a
repeat node. 

@subsubheading Common ports
@table @code
@item out (output)
Generated data stream. Only one connection is allowed.
@end table

@subsubheading Common parameters
@table @code
@item position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@item rate (int)
Samplerate of generated data stream. Defaults to compile-time setting
of GLAME_DEFAULT_SAMPLERATE, usually 44100 Hz.
@end table

@file{const} has no further specific ports.

@subsubheading @file{const} parameters
@table @code
@item value (sample)
Constant signal value. Defaults to 0.
@end table

@file{sine} has no further specific ports.

@subsubheading @file{sine} parameters
@table @code
@item amplitude (sample)
Amplitude of generated sine wave. Allowed value range is from 0 to 1. 
Defaults to 0.5.
@item frequency (float)
Frequency of generated sine wave in Hz. Defaults to 441 Hz.
@end table

@node Junctions and Dead Ends, Mangling Data Streams, Generating Waves, Elementary Plugins
@subsection Junctions and Dead Ends

In a filter network, data streams don't get created from nowhere, neither
do they disappear into a big black void: there must be a plugin at each
endpoint of a connection. These Plugins in turn are allowed to dump data or
create new streams.

The @file{drop} plugin is used as a sink for data that is no longer needed 
within the network. Any incoming data is simply discarded. It's the dead
end of a network.

If the same stream of data is needed more than once, it cannot simply be 
applied several times to different ports, it has to be duplicated first. 
@file{one2n} is the plugin to perform this task, it forks the network, so
to speak.

@file{mix} on the other hand acts as a junction and merges several data
streams into one, just like an ordinary mixing desk. The @file{mix} plugin
comes in two flavours, @file{mix}, and @file{mix2}. The only time to worry
about the differences is when you want to create loops in your network: 
@file{mix} drops all input data after the first input stream has terminated,
@file{mix2} continues to mix available inputs instead. Otherwise @file{mix}
and @file{mix2} are identical. Use @file{mix} for mixing feedback.

@subsubheading @file{drop} ports
@table @code
@item in (input)
Data to be dropped. Any number of input connections is allowed.
@end table

@file{drop} has no parameters.

@subsubheading @file{one2n} ports
@table @code
@item in (input)
Stream to be replicated.
@item out (output)
Replicated stream. Any number of output connections is allowed.
@end table

@file{one2n} has no parameters.

@subsubheading @file{mix} ports
@table @code
@item in (input)
Audio streams to be mixed. Any number of input connections is allowed.
@item out (output)
Mixed audio stream.
@end table

@subsubheading @file{mix} parameters
@table @code
@item in::gain (float)
Gain of the input. Defaults to 1.
@item in::offset (time)
Start mixing in input stream after relative time offset (in seconds). 
Defaults to 0.
@item gain (float)
Gain of the output stream. Defaults to 1.
@item position (float)
Horizontal placement of sample stream in radians from -pi to pi.
@end table

@node Mangling Data Streams, Orientation, Junctions and Dead Ends, Elementary Plugins
@subsection Mangling Data Streams

All the plugins described in this section operate on a single input stream 
and transform it into a slightly mangled single output stream. 
@file{volume-adjust} scales the amplitude of a data stream. 
@file{delay} and @file{extend} prepend and append zero samples to a data
stream respectively. @file{repeat} resends an input sequence over and over
for a fixed time. @file{invert} inverts all data of the input stream, i.e. 
each sample A is replaced by -A.

@subsubheading Common ports
@table @code
@item in (input)
Stream of input sample data.
@item out (output)
Stream of transformed output sample data.
@end table

@file{invert} has no parameters.

@subsubheading @file{volume-adjust}
@table @code
@item factor (float)
Value to scale input stream's amplitude with.
@end table

@subsubheading @file{delay}
@table @code
@item delay (time)
Input data stream is prepended with zero samples for delay milliseconds.
Defaults to 0ms.
@end table

@subsubheading @file{extend}
@table @code
@item time (time)
Zero samples are appended to input stream for delay milliseconds.
Defaults to 0ms.
@end table

@subsubheading @file{repeat}
@table @code
@item duration (time)
The input pattern is repeated until a total time of duration seconds is
reached. Defaults to 0s.
@end table

@node Orientation,, Mangling Data Streams, Elementary Plugins
@subsection Orientation

The @file{pan} plugin distributes a mono sample stream to two stereo
(left/right) output streams. 

@subsubheading @file{pan} ports
@table @code
@item in (input)
Mono stream to pan. Only a single connection allowed.
@item left-out (output)
@item right-out (output)
Left/right stereo output stream. Only one connection per port is allowed.
@end table

@subsubheading @file{pan} parameters
@table @code
@item pan (float)
Pan value (virtual direction) of mono input stream. By default, @file{pan}
uses the input pipe's position property as pan value. It is overridden if
the @code{pan} parameter is set. Allowed values range from -pi/2 to pi/2. 
As the position property ranges from -pi to pi, values with magnitude 
larger than pi/2 (i.e. positions in the 'back') are mirrored to the front.
@end table

@node Effects,, Elementary Plugins, Plugin Collection
@section Effects

TODO: echo (echo.c), noisegate (noisegate.c), iir (iir.c)

