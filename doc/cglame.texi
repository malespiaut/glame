@comment $Id: cglame.texi,v 1.10 2000/12/11 10:41:58 richi Exp $

@node Console Frontend, Plugin Collection, Graphical Frontend, Top
@chapter Console Frontend (cglame)

cglame is the console interface to glame. After a brief introduction
into the cglame user interface the wrapped midlayer and backend APIs
are listed and an ontop scheme level API is described.

@menu
* cglame Introduction::
* Wrapped API::
* cglame Convenience::
@end menu


@node cglame Introduction, Wrapped API,, Console Frontend
@section cglame Introduction

cglame is a scripting engine
in the sense that you are presented a @code{guile>} command line prompt
where you can enter scheme expressions. cglame exposes the midlayer API
and the backends API via scheme wrappers. Extra convenience scripting
procedures are defined inside the installed @code{glame.scm} scheme file.
You can add customisations via your @code{~/.glame.scm} file.

As command line option to cglame you may specify the to be used
@code{swapfile}. A swapfile is necessary, if you want to use any
of the swapfile API procedures. Once started, cglame presents you with a
command prompt where you can evaluate scheme expressions. An example
session is showed below.

@example
$ cglame

    CGLAME for GLAME version 0.2.0, Copyright (C) 1999, 2000
    Alexander Ehlert, Jim Garrison, Richard Guenther, Johannes Hirche,
    Daniel Kobras.
    CGLAME and GLAME come with ABSOLUTELY NO WARRANTY. This is free
    software, and you are welcome to redistribute it under certain
    conditions.

    Usage: cglame [swapfile]

Quick help:
(quit) gets you out of here.
(help) gets you some additional help.

guile> (play "/var/tmp/short.wav")
guile> (play-eff "/var/tmp/test.wav" '("echo"))
guile> (let* ((net (net-new))
... (nodes (net-add-nodes net '("read_file" "echo" "audio_out")))
... (echo2 (net-add-node net "echo")))
... (node-set-param (car nodes) "filename" "/var/tmp/test.wav")
... (nodes-connect nodes)
... (nodes-connect (list (car nodes) echo2 (caddr nodes)))
... (net-run net))
guile> (quit)
$
@end example

All used scheme procedures which are not documented in the following
sections reside in the @code{glame.scm} file coming with glame.



@node Wrapped API, cglame Convenience, cglame Introduction, Console Frontend
@section Wrapped API

For description of the semantics of the available parts of the APIs
please refer to the native documentation. Note that all scheme procedures
evaluate to @code{#f} if there is any error. C functions which return
0 on success are transformed to procedures evaluating to @code{#t}
on success or @code{#f} on error. Void functions generally evaluate to
@code{#unspecified}.

@menu
* Scheme Filter API::
* Scheme Swapfile API::
* Scheme Midlayer API::
@end menu

@node Scheme Filter API, Scheme Swapfile API,, Wrapped API
@subsection Scheme Filter API

@deftypefun ( filter_creat [filter] )
@deftypefunx ( filter_instantiate plugin )
@deftypefunx ( filter_add_node filter filter node-name )
@deftypefunx ( filter_connect filter port-name filter port-name )
@deftypefunx ( filter_to_string filter )
@end deftypefun

@deftypefun ( delete object )
@deftypefunx ( get-name object )
@deftypefunx ( set-property object label value )
@deftypefunx ( get-property object label )
@deftypefunx ( get-nodes object )
@deftypefunx ( get-params object )
@deftypefunx ( get-ports object )
@deftypefunx ( get-pipes object )
These procedures operate on filters, ports, pipes and params.
@end deftypefun

@deftypefun ( filter_launch filter )
@deftypefunx ( filter_start filter )
@deftypefunx ( filter_pause filter )
@deftypefunx ( filter_wait filter )
@deftypefunx ( filter_terminate filter )
@end deftypefun

@deftypefun ( filternetwork_add_input net-id node-id port-name name description )
@deftypefunx ( filternetwork_add_output net-id node-id port-name name description )
@deftypefunx ( filternetwork_add_param net-id node-id param-name name description )
@deftypefunx ( filternode_set_param node-id param-name value )
@deftypefunx ( filterpipe_set_sourceparam pipe-id param-name value )
@deftypefunx ( filterpipe_set_destparam pipe-id param-name value )
@end deftypefun

@deftypefun ( glame-create-plugin filter name )
Create and register a new plugin using the specified name and associate
it with the provided filter. Evaluates to a plugin or to @code{#f} on
error.
@end deftypefun


@node Scheme Swapfile API, Scheme Midlayer API, Scheme Filter API, Wrapped API
@subsection Scheme Swapfile API


@node Scheme Midlayer API,, Scheme Swapfile API, Wrapped API
@subsection Scheme Midlayer API

The only wrapped part of the glame midlayer is the plugin API.

@deftypefun ( plugin_add_path path )
@deftypefunx ( plugin_get name )
@deftypefunx ( plugin_name plugin-id )
@deftypefunx ( plugin_description plugin-id )
@code{plugin_get} evaluates to a @code{plugin-id}, @code{plugin_name} and
@code{plugin_description} to a @code{string}.
@end deftypefun



@node cglame Convenience,, Wrapped API, Console Frontend
@section cglame Convenience

@menu
* Network setup::
* Cooked operations::
@end menu

@node Network setup,, Cooked operations, cglame Convenience
@subsection Network setup

@deftypefun ( net-new )
Creates a new filternetwork. @code{net-new} evaluates to a
net-id.
@end deftypefun

@deftypefun ( net-add-node net-id node '("label" value) ... )
@deftypefunx ( net-add-nodes net-id node '(node '("label" value) ...) ... )
@deftypefunx ( nodes-delete node-id ... )
@code{net-add-node} adds a single node with optional parameters
to the network specified by @var{net-id}. @code{net-add-nodes}
adds a set of nodes with optional parameters to the network.
@code{net-add-node} evaluates to a @code{node-id}, @code{net-add-nodes}
to a list of @code{node-id}s. Using @code{nodes-delete} you can delete
nodes from a network.
@end deftypefun

@deftypefun ( nodes-connect nodes ... )
@code{nodes-connect} linearily connects the specified lists of
@code{node-id}s.
@end deftypefun

@deftypefun ( node-set-params node-id '("label" value) ... )
Using @code{node-set-params} you can set the parameters of the
specified @var{node-id}.
@end deftypefun

@deftypefun ( net-run net-id )
@deftypefunx ( net-run-bg net-id )
@code{net-run} starts processing of the network and waits until completion.
@code{net-run-bg} starts processing of the network and returns immediately.
@end deftypefun


@node Cooked operations, Network setup,, cglame Convenience
@subsection Cooked operations

The following procedures can be customized by defining the
@code{audio-out}, @code{read-file} or @code{write-file} to other
filters than their default ones which are their names.

@deftypefun ( play filename )
Plays the specified file.
@end deftypefun

@deftypefun ( play-eff filename '(effect ("label" value) ...) ... )
@deftypefunx ( save-eff infile outfile '(effect ("label" value) ...) ... )
Plays or saves the specified file after applying the specified chain
of effects with parameters.
@end deftypefun

