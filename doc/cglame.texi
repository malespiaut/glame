@comment $Id: cglame.texi,v 1.17 2005/03/28 18:27:08 richi Exp $

@node Console Frontend, Plugin Collection, Graphical Frontend, Top
@chapter Console Frontend (cglame)

@file{cglame} is GLAME's console interface. Beware! @file{cglame} is
not for whimps but for real men and women who dream in Scheme and
chomp brackets for breakfast. It's for those who want to feel the
ultimate power of GLAME. Thankfully, J. Random User won't have to dive
into the perils of @file{cglame} and will be all happy with @file{glame},
the friendly and intuitive graphical frontend @pxref{Graphical Frontend}.

Still there? Wheee, you're a tough one! Let's see what's in here for you:
This chapter starts with a brief introduction into the @file{cglame} user
interface. Afterwards, the wrapped midlayer and backend APIs are listed, and
an the scheme level API on top will be described.


@menu
* cglame Introduction::
* Wrapped API::
* cglame Convenience::
@end menu


@node cglame Introduction, Wrapped API,, Console Frontend
@section cglame Introduction

@file{cglame} is a scripting engine
in the sense that you are presented a @code{glame>} command line prompt
where you can enter scheme expressions. @file{cglame} exposes GLAME's 
midlayer API and the backend API via scheme wrappers. Extra convenience
scripting procedures are defined in the global @file{glame.scm} scheme
file. You can add customisations via your @file{~/.glame.scm} file or
by loading appropriate scheme files at the appropriate time using
@code{(load 'filename)}.

As command line option to @file{cglame} you may specify the swapfile to
be used like @code{-s path-to-swapfile}.  A swapfile is necessary if you
want to use any of the swapfile API procedures. To make @file{cglame}
create a swapfile for you use @code{-c path-to-swapfile}.

Once started, @file{cglame} presents you with a command prompt where you
can evaluate scheme expressions. An example session is shown below.
Alternatively you may run @file{cglame} non-interactively by specifying
the filename of a to be executed script as last argument to @file{cglame}.

@example
$ cglame

    CGLAME for GLAME version 0.5.2, Copyright (C) 1999-2001
    Alexander Ehlert, Richard Guenther, Johannes Hirche, Daniel Kobras.
    CGLAME and GLAME come with ABSOLUTELY NO WARRANTY. This is free
    software, and you are welcome to redistribute it under certain
    conditions.

Quick help:
(quit) gets you out of here.
(help) gets you some additional help.

glame> (play "/var/tmp/short.wav")
glame> (play-eff "/var/tmp/test.wav" '("echo"))
glame> (let* ((net (net-new))
... (nodes (net-add-nodes net '("read_file" "echo" "audio_out")))
... (echo2 (net-add-node net "echo")))
... (node-set-param (car nodes) "filename" "/var/tmp/test.wav")
... (nodes-connect nodes)
... (nodes-connect (list (car nodes) echo2 (caddr nodes)))
... (net-run net))
glame> (quit)
$
@end example

All used scheme procedures which are not documented in the following
sections reside in the @file{glame.scm} file shipped with glame,
usually installed as @file{/usr/share/glame/glame.scm}.



@node Wrapped API, cglame Convenience, cglame Introduction, Console Frontend
@section Wrapped API

For description of the detailled semantics of the available parts of the
APIs please refer to the native documentation.

C functions which return 0 on succcess and -1 on error are converted to
scheme procedures evaluating to @code{#unspecified} on success and
throwing a @code{'glame-error} exception on error.
C functions which return an object on success and @code{NULL} on error
are converted to scheme procedures evaluating to an object and throwing
a @code{'glame-error} exception on error.
Void functions generally evaluate to @code{#unspecified}.

You can catch @code{'glame-error} exceptions by using code like the
following:
@example
glame> (catch 'glame-error
              (lambda () (filter-connect foo "out" bar "in"))
              (lambda args (display "Cannot connect\n")))
@end example

@menu
* Scheme Filter API::
* Scheme Swapfile API::
* Scheme Plugin API::
* Scheme GPSM API::
* Scheme GUI interaction::
@end menu

@node Scheme Filter API, Scheme Swapfile API,, Wrapped API
@subsection Scheme Filter API

The basic filter subsystem types, @code{filter_t}, @code{filter_port_t},
@code{filter_pipe_t} and @code{filter_param_t} exist as native scheme
types and such can be type checked.

@defun filter? obj
@defunx port? obj
@defunx pipe? obj
@defunx param? obj 
These procedures check @code{obj} for being of the specified type and
evaluate to @code{#t} if this is the case and @code{#f} otherwise.
@end defun

Out of a filter object you can get information and subobjects using
the following procedures:

@defun filter-name filter
@defunx filter-nodes filter
@defunx filter-ports filter
@defunx filter-params filter
These procedures evaluate to a string containing the filters name or
to lists of the specified object type representing the actual subobjects
associated with the filter.
@end defun

Out of a port object you can get information and subobjects using
the following procedures:

@defun port-label port
@defunx port-pipes port
@defunx port-params port
These procedures evaluate to a string containing the ports label or
to lists of the specified object type representing the actual subobjects
associated with the port.
@end defun

Out of a param object you can get and modify information using the following
procedures:

@defun param-label param
@defunx param-value param
@defunx param-set! param value
These procedures evaluate to a string containing the label of the
param object, the actual value of the param whose type depends on
the param objects type or a boolean denoting the success of a param
set command.
@end defun

Out of a pipe object you can get information and subobjects using
the following procedures:

@defun pipe-samplerate pipe
@defunx pipe-position pipe
@defunx pipe-source-params pipe
@defunx pipe-dest-params pipe
These procedures evaluate to an exact number containing the samplerate
of the data flowing through the pipe, a number containing the position
of the audio stream or
to lists of the specified object type representing the actual subobjects
associated with the pipe.
@end defun

Pipe objects can be queried for the actual protocol type using the
following procedures:

@defun pipe-sample? pipe
@defunx pipe-fft? pipe
@defunx pipe-ssp? pipe
These procedures check @code{pipe} for being of the specified protocol type and
evaluate to @code{#t} if this is the case and @code{#f} otherwise.
@end defun

Usually you can attach key/value pairs to a per object database. Those
object properties can be queried and modified using the following generic
interface:

@defun set-property! obj key value
@defunx get-property obj key
These procedures evaluate to @code{#unspecified} or a string object
containing the value associated with the specified key or @code{#f} if
this key has no associated value. Note that for both @code{key} and
@code{value} only string objects are allowed.
Predefined key values are @code{FILTERPARAM_DESCRIPTION},
@code{FILTERPARAM_GLADEXML} and @code{FILTERPORT_DESCRIPTION}.
@end defun


The following procedures handle object serialization and creation
and destruction of objects.

@defun filter-new [filter|plugin]
@defunx filter-delete filter
@defunx port-delete port
@defunx param-delete param
@defunx pipe-delete pipe
@code{filter-new} constructs a new filter object by either cloning
from a filter or a plugin object or creating an empty network from
scratch. The delete procedures destruct the specified objects.
@end defun

@defun filter->string filter
@defunx param->string param
While the first procedure returns a string containing a scheme
expression being able to recreate the filter object, the second
procedure just evaluates to a string containing the value of the
specified param.
@end defun

@defun filter-add-node filter filter node-name
@defunx filter-connect filter port-name filter port-name
@code{filter-add-node} adds the specified filter (second parameter) to
the specified network (first parameter) using the identifier specified
as third parameter.
@code{filter-connect} connects the two specified parameters via the
specified ports identified by their port names. @code{filter-connect}
evaluates to a pipe object.
@end defun

@defun filternetwork-add-input filter filter port-name name description
@defunx filternetwork-add-output filter filter port-name name description
@defunx filternetwork-add-param filter filter param-name name description
Procedures to be used for exporting ports and params to the outside world
in a macro filter. The first parameter is the actual network, the second
parameter is the node that gets exported from. These procedures evaluate
to a port or a param object.
@end defun

@defun glame_create_plugin filter name
@defunx glame_plugin_define filter name
@code{glame_create_plugin} creates and registers a new plugin using the
specified name and associate it with the provided filter. Evaluates to a
plugin or to @code{#f} on error.
@code{glame_plugin_define} is used internally for transparently registering
or filter loading.
@end defun

@defun filter-launch filter
@defunx filter-start filter
@defunx filter-pause filter
@defunx filter-wait filter
@defunx filter-terminate filter
These procedures handle filter network execution.
@end defun



@node Scheme Swapfile API, Scheme Plugin API, Scheme Filter API, Wrapped API
@subsection Scheme Swapfile API

The swapfile is a container for data in its raw form. It is modeled
after a simple filesystem with a flat namespace (no directories) and
names being just cardinal numbers.


@defun swapfile-open path
@defunx swapfile-close
@defunx swapfile-creat path
These procedures control the swapfile subsystem. @code{swapfile-open}
initializes the subsystem from the swapfile at the specified location.
@code{swapfile-creat} tries to create a new swapfile at the specified
location, @code{swapfile-close} cleans up and closes the subsystem.
@end defun

@defun swdir? dir
@defunx sw-opendir
@defunx sw-readdir dir
@defunx sw-closedir dir
These procedures can be used to traverse the swapfile files. Function
is like the libc readdir routines, but as the swapfile has a flat
namespace you dont specify a subdirectory for @code{sw-opendir}.
@code{sw-opendir} evaluates to a @code{swdir} object.
@code{sw-readdir} returns swapfile filenames as long as they are
available and @code{#f} upon directory end.
@end defun

@defun sw-unlink name
Unlinks the specified file from the swapfile. You cannot recover
unlinked swapfiles. Behavior is like unlink(2), i.e. if the file
is still open the deletion of the data is postponed until close of
the file.
@end defun

@defun swfd? fd
@defunx sw-open name flags
@defunx sw-close fd
For working with a swapfile you need to obtain a handle to it.
Use @code{sw-open} to open the swapfile with the specified name.
The flags argument is modeled after open(2), @code{O_CREAT},
@code{O_EXCL}, @code{O_TRUNC}, @code{O_RDWR}, @code{O_RDONLY}
and @code{O_WRONLY} are available. Or them together like
@code{(+ O_CREAT O_TRUNC O_RDWR)}. @code{sw-open} evaluates
to a file descriptor which you can identify using the @code{swfd?}
predicate. Use @code{sw-close} if you are finished with the file.
@end defun

@defun sw-fstat fd
@code{sw-fstat} obtains information about an open filedescriptor.
It evaluates to a list of the form @code{( name size mode offset
cluster-start cluster-end cluster-size )} where all entries are
cardinals.
@end defun

@defun sw-lseek fd offset whence
To seek inside a file use @code{sw-lseek} which works like lseek(2),
i.e. it seeks relative to whence offset bytes. For whence @code{SEEK_CUR},
@code{SEEK_SET} and @code{SEEK_END} are available. @code{sw-lseek}
evaluates to the current file pointer position.
@end defun

@defun sw-ftruncate fd size
@code{sw-ftruncate} truncates the specified file to the specified size
appending zeroes in case of enlarging.
@end defun

@defun sw-sendfile dest-fd source-fd size [flags]
@code{sw-sendfile} copies (by using copy on write) size bytes
from the current filepointer position of the source-fd to the
current filepointer position of the dest-fd. Via the optional
flags argument you can specify the following
@table @code
@item SWSENDFILE_INSERT
The data is inserted at the filepointer position of the dest-fd
instead of overwriting and/or extending the file.
@item SWSENDFILE_CUT
The data is removed from the source-fd after writing to the
dest-fd
@end table
For both files you can specify @code{SW_NOFILE} if it makes sense
(i.e. for just cutting out data specify @code{SW_NOFILE} as dest-fd
and @code{SWSENDFILE_CUT} as flag).
@end defun


@defun sw-read-floatvec fd size
@defunx sw-read-string fd size
@defunx sw-write fd data
Those are the basic read and write operations. Both strings and
float vectors are supported by the scheme interface. For reading
you need to specify the type via the procedure name, for writing
the type is automatically determined. The read procedures read
size number of objects from the current filepointer position.
They evaluate to the number of objects read. @code{sw-write}
writes the whole object to the current filepointer position and
evaluates to the number of objects written.
All procedures increment the filepointer position by the number
of bytes read/written.
@end defun



@node Scheme Plugin API, Scheme GPSM API, Scheme Swapfile API, Wrapped API
@subsection Scheme Plugin API

The glame plugin midlayer API is wrapped with the following
procedures:

@defun plugin? plugin
This procedure checks, if the specified object represents a plugin and
evaluates to @code{#t} in this case, else @code{#f}.
@end defun

@defun plugin-add-path path
This procedure adds the specified path to the plugin shared object
search path that is used by the @code{plugin-get} procedure.
@end defun

@defun plugin-get name
Queries a plugin with the specified name out of the plugin database.
Evaluates to a plugin or @code{#f} if a plugin with the specified name
cannot be found.
@end defun

@defun plugin-name plugin
@defunx plugin-query plugin key
@defunx plugin-set! plugin key value
Queries the name or custom properties out of a plugin. Those procedures
evaluate to a string, @code{plugin-set!} sets the specified property to
the specified string. Predefined property keys are
@code{PLUGIN_DESCRIPTION}, @code{PLUGIN_PIXMAP}, @code{PLUGIN_CATEGORY},
@code{PLUGIN_GUI_HELP_PATH} and @code{PLUGIN_LABEL}.
@end defun




@node Scheme GPSM API, Scheme GUI interaction, Scheme Plugin API, Wrapped API
@subsection Scheme GPSM API

The glame gpsm midlayer API is used to represent metadata associated
with wave data, i.e. samplerate and positional information. The gpsm
API also wraps swapfile modification of wave data.

For global control and initialization the following procedures are
available:

@defun gpsm-init path
@defunx gpsm-sync
@defunx gpsm-close
These procedures handle initialization and cleanup of the gpsm
and the swapfile subsystem. As path you need to specify the path
to the to be used swapfile. @code{gpsm-sync} syncs all gpsm
metadata to disk.
@end defun

The gpsm subsystem builds on a tree of gpsm items which are derived
from a generic item type. Available item types are the gpsm group
which just contains a list of children, and the gpsm swapfile which
represents a wave with its metadata and swapfile representation.

@defun gpsm-item? item
@defunx gpsm-grp? item
@defunx gpsm-swfile? item
These predicates check if the provided object is an gpsm item, or
one of the derived types, a gpsm group or a gpsm swapfile.
@end defun

@defun gpsm-item-parent item
@defunx gpsm-item-label item
@defunx gpsm-item-hposition item
@defunx gpsm-item-vposition item
@defunx gpsm-item-hsize item
@defunx gpsm-item-vsize item
These procedures give access to the basic gpsm type, the gpsm item.
They evaluate to the items parent item, to its label or its position
and extension.
@end defun

@defun gpsm-grp-items item
@code{gpsm-grp-items} evaluates to the list of childs of the group.
@end defun

@defun gpsm-swfile-filename item
@defunx gpsm-swfile-samplerate item
@defunx gpsm-swfile-position item
These procedures give access to the gpsm swapfile type. They evaluate
to the wave swapfile metadata, respective the swapfile filename, its
samplerate and position in the stereo field.
@end defun

@defun gpsm-item-set-label! item label
@defunx gpsm-swfile-set-samplerate! item rate
@defunx gpsm-swfile-set-position! item position
These procedues modify one of the gpsm type properties.
@end defun


For creating, copying, linking and destroying of items the following
procedures are available:

@defun gpsm-newswfile label
@defunx gpsm-swfile-cow swfile
@defunx gpsm-swfile-link swfile
@end defun

@defun gpsm-newgrp label
@end defun

@defun gpsm-item-destroy item
@end defun


For structuring, modifying and traversing of the gpsm tree the
following procedures are available:

@defun gpsm-root
Evaluates to the gpsm tree root item.
@end defun

@defun gpsm-grp-hbox? grp
@defunx gpsm-grp-vbox? grp
Predicates that check, if the specified group is a hbox (a set of
horizontally sorted, non-overlapping items), or a vbox (a set of
vertically sorted, non-overlapping items).
@end defun

@defun gpsm-item-can-place? grp item hposition vposition
@defunx gpsm-item-place grp item hposition vposition
Placing happens without moving unaffected items. Placing needs to
happen at a position where the needed space is already available.
@end defun

@defun gpsm-item-remove item
Removing happens without moving unaffected items and reverses
a previous @code{gpsm-item-place} operation.
@end defun

@defun gpsm-hbox-can-insert? grp item hposition vposition
@defunx gpsm-hbox-insert grp item hposition vposition
Insertion moves adjacend items horizontally by the size of the inserted
item. Only the starting position needs to be unoccupied.
@end defun

@defun gpsm-vbox-can-insert? grp item hposition vposition
@defunx gpsm-vbox-insert grp item hposition vposition
Insertion moves adjacend items vertically by the size of the inserted
item. Only the starting position needs to be unoccupied.
@end defun

@defun gpsm-hbox-cut item
Cutting moves adjacend items horizontally by the size of the cutted
item, reversing a previous @code{gpsm-hbox-insert} operation.
@end defun

@defun gpsm-vbox-cut item
Cutting moves adjacend items vertically by the size of the cutted
item, reversing a previous @code{gpsm-vbox-insert} operation.
@end defun


For the provided notification facility of changes to the underlying
wave object (the swapfile file), the following procedures need to
be called, whenever a change is made bypassing the gpsm subsystem.
They all take a swapfile filename instead of a gpsm object.

@defun gpsm-notify-swapfile-change name position size
@defunx gpsm-notify-swapfile-cut name position size
@defunx gpsm-notify-swapfile-insert name position size
@defunx gpsm-invalidate-swapfile name
Via these procedures you signal a change within the specified region
of the swapfile with the specified name. Either just data modification
or insertion or deletion of the region. Via @code{gpsm-invalidate-swapfile}
you tell the gpsm subsystem to drop all its knowledge of the data of
the swapfile, including its current size.
@end defun


The gpsm subsystem transparently provides undo and redo operations for
swapfiles via the following procedures:

@defun gpsm-op-prepare item
Prepares the subtree specified by the provided item for later undo,
i.e. restoring of the current state.
@end defun

@defun gpsm-op-forget item
Forgets the most recent stored state of the subtree specified by the
provided item.
@end defun

@defun gpsm-op-can-undo? item
@defunx gpsm-op-undo item
@defunx gpsm-op-undo-and-forget item
@code{gpsm-op-can-undo?} evaluates to @code{#t} if there is a previous
state available that can be restored now for the subtree specified by
the provided item. @code{gpsm-op-undo} restores this state and remembers
the current one for later redo. @code{gpsm-op-undo-and-forget} does not
remember the current state for later redo.
@end defun

@defun gpsm-op-can-redo? item
@defunx gpsm-op-redo item
@defunx gpsm-op-redo-and-forget item
@code{gpsm-op-can-redo?} evaluates to @code{#t} if there is a previous
state available created by an @code{gpsm-op-undo} operation for the
subtree specified by the provided item. @code{gpsm-op-redo} restores
this state and remembers the current one for later
undo. @code{gpsm-op-redo-and-forget} does not remember the current state
for later undo.
@end defun



@node Scheme GUI interaction, , Scheme GPSM API, Wrapped API
@subsection Scheme GUI interaction

FIXME. See various files in @code{src/gui}.


@node cglame Convenience,, Wrapped API, Console Frontend
@section cglame Convenience

For the convenience procedures online help is (maybe) available
via @code{(help command)} or @code{(help)}.

@menu
* Network setup::
* Cooked operations::
@end menu

@node Network setup, Cooked operations,, cglame Convenience
@subsection Network setup

@defun net-new
Creates a new filternetwork. @code{net-new} evaluates to a
filter.
@end defun

@defun net-add-node filter node '("label" value) ...
@defunx net-add-nodes filter node '(node '("label" value) ...) ...
@defunx nodes-delete filter ...
@code{net-add-node} adds a single node with optional parameters
to the network specified by @var{filter}. @code{net-add-nodes}
adds a set of nodes with optional parameters to the network.
@code{net-add-node} evaluates to a @code{filter}, @code{net-add-nodes}
to a list of @code{filter}s. Using @code{nodes-delete} you can delete
nodes from a network.
@end defun

@defun nodes-connect nodes ...
@code{nodes-connect} linearily connects the specified lists of
@code{filter}s.
@end defun

@defun node-set-params filter '("label" value) ...
Using @code{node-set-params} you can set the parameters of the
specified @var{filter}.
@end defun

@defun net-run filter
@defunx net-run-bg filter
@code{net-run} starts processing of the network and waits until completion.
@code{net-run-bg} starts processing of the network and returns immediately.
@end defun


@node Cooked operations,, Network setup, cglame Convenience
@subsection Cooked operations

The following procedures can be customised by setting
@code{audio-out}, @code{read-file} or @code{write-file} to other
filters than their default ones like @code{(set! read-file "read-mp3")}.

@defun play filename
Plays the specified file.
@end defun

@defun play-eff filename '(effect ("label" value) ...) ...
@defunx save-eff infile outfile '(effect ("label" value) ...) ...
Plays or saves the specified file after applying the specified chain
of effects with parameters.
@end defun

