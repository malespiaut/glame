@comment $Id: cglame.texi,v 1.6 2000/04/10 12:40:08 richi Exp $

@node Console Frontend, Plugin Collection, Graphical Frontend, Top
@chapter Console Frontend (cglame)

cglame is the console interface to glame. After a brief introduction
into the cglame user interface the wrapped midlayer and backend APIs
are listed and an ontop scheme level API is described.

@menu
* cglame Introduction::
* Wrapped API::
* cglame Convenience::
@end menu


@node cglame Introduction, Wrapped API,, Console Frontend
@section cglame Introduction

cglame is a scripting engine
in the sense that you are presented a @code{guile>} command line prompt
where you can enter scheme expressions. cglame exposes the midlayer API
and the backends API via scheme wrappers. Extra convenience scripting
procedures are defined inside the installed @code{glame.scm} scheme file.
You can add customisations via your @code{~/.glame.scm} file.

As command line option to cglame you may specify the to be used
@code{swapfile}. A swapfile is necessary, if you want to use any
of the swapfile API procedures. Once started, cglame presents you with a
command prompt where you can evaluate scheme expressions. An example
session is showed below.

@example
$ cglame

    CGLAME for GLAME version 0.1.31, Copyright (C) 1999, 2000
    Alexander Ehlert, Jim Garrison, Richard Guenther, Johannes Hirche,
    Daniel Kobras.
    CGLAME and GLAME come with ABSOLUTELY NO WARRANTY. This is free
    software, and you are welcome to redistribute it under certain
    conditions.

    Usage: cglame [swapfile]

Quick help:
(quit) gets you out of here.
(help) gets you some additional help.

guile> (play "/var/tmp/short.wav")
guile> (play-eff "/var/tmp/test.wav" "echo")
guile> (let* ((net (net-new))
... (nodes (net-add-nodes net '("read_file" "echo" "audio_out")))
... (echo2 (net-add-node net "echo")))
... (node-set-param (car nodes) "filename" "/var/tmp/test.wav")
... (nodes-connect nodes)
... (nodes-connect (list (car nodes) echo2 (caddr nodes)))
... (net-run net))
guile> (quit)
$
@end example

All used scheme procedures which are not documented in the following
sections reside in the @code{glame.scm} file coming with glame.



@node Wrapped API, cglame Convenience, cglame Introduction, Console Frontend
@section Wrapped API

For description of the semantics of the available parts of the APIs
please refer to the native documentation. Note that all scheme procedures
evaluate to @code{#f} if there is any error. C functions which return
0 on success are transformed to procedures evaluating to @code{#t}
on success or @code{#f} on error. Void functions generally evaluate to
@code{#unspecified}.

@menu
* Scheme Filter API::
* Scheme Swapfile API::
* Scheme Midlayer API::
@end menu

@node Scheme Filter API, Scheme Swapfile API,, Wrapped API
@subsection Scheme Filter API

@deftypefun ( filternetwork_new )
@deftypefunx ( filternetwork_delete net-id )
@deftypefunx ( filternetwork_add_node net-id filter-name node-name )
@deftypefunx ( filternetwork_delete_node node-id )
@deftypefunx ( filternetwork_add_connection node-id port-name node-id port-name )
@deftypefunx ( filternetwork_break_connection pipe-id )
@deftypefunx ( filternetwork_launch net-id )
@deftypefunx ( filternetwork_start net-id )
@deftypefunx ( filternetwork_pause net-id )
@deftypefunx ( filternetwork_wait net-id )
@deftypefunx ( filternetwork_terminate net-id )
@deftypefunx ( filternetwork_add_input net-id node-id port-name name description )
@deftypefunx ( filternetwork_add_output net-id node-id port-name name description )
@deftypefunx ( filternetwork_add_param net-id node-id param-name name description )
@deftypefunx ( filternetwork_to_string net-id )
@deftypefunx ( filternode_set_param node-id param-name value )
@deftypefunx ( filterpipe_set_sourceparam node-id param-name value )
@deftypefunx ( filterpipe_set_destparam node-id param-name value )
@code{filternetwork_new} evaluates to a @code{net-id},
@code{filternetwork_add_node} to a @code{node-id},
@code{filternetwork_add_connection} to a @code{pipe-id}.
@end deftypefun

@deftypefun ( filternetwork_to_filter net-id name description )
This procedure is not part of the native C interface, but is a combination
of the @code{filter_from_network()} and @code{filter_add()} functions. I.e.
the provided filternetwork is added to the filter database using the
specified name and description.
@end deftypefun


@node Scheme Swapfile API, Scheme Midlayer API, Scheme Filter API, Wrapped API
@subsection Scheme Swapfile API

@deftypefun ( file_alloc size )
@deftypefunx ( file_unref file-id )
@deftypefunx ( file_size file-id )
@deftypefunx ( file_truncate file-id size )
@deftypefunx ( file_copy file-id pos size )
@deftypefunx ( file_op_insert file-id pos file-id )
@deftypefunx ( file_op_cut file-id pos size )
@deftypefunx ( file_transaction_begin file-id )
@deftypefunx ( file_transaction_end file-id )
@deftypefunx ( file_transaction_undo file-id )
@deftypefunx ( file_transaction_redo file-id )
@code{file_alloc} and @code{file_copy} evaluate to a @code{file-id},
@code{file_size} to an @code{exact}.
@end deftypefun


@node Scheme Midlayer API,, Scheme Swapfile API, Wrapped API
@subsection Scheme Midlayer API

The only wrapped part of the glame midlayer is the plugin API.

@deftypefun ( plugin_add_path path )
@deftypefunx ( plugin_get name )
@deftypefunx ( plugin_name plugin-id )
@deftypefunx ( plugin_description plugin-id )
@code{plugin_get} evaluates to a @code{plugin-id}, @code{plugin_name} and
@code{plugin_description} to a @code{string}.
@end deftypefun



@node cglame Convenience,, Wrapped API, Console Frontend
@section cglame Convenience

@menu
* Network setup::
* Cooked operations::
@end menu

@node Network setup,, Cooked operations, cglame Convenience
@subsection Network setup

@deftypefun ( net-new )
Creates a new filternetwork. @code{net-new} evaluates to a
net-id.
@end deftypefun

@deftypefun ( net-add-node net-id node '("label" value) ... )
@deftypefunx ( net-add-nodes net-id node '(node '("label" value) ...) ... )
@deftypefunx ( nodes-delete node-id ... )
@code{net-add-node} adds a single node with optional parameters
to the network specified by @var{net-id}. @code{net-add-nodes}
adds a set of nodes with optional parameters to the network.
@code{net-add-node} evaluates to a @code{node-id}, @code{net-add-nodes}
to a list of @code{node-id}s. Using @code{nodes-delete} you can delete
nodes from a network.
@end deftypefun

@deftypefun ( nodes-connect nodes ... )
@code{nodes-connect} linearily connects the specified lists of
@code{node-id}s.
@end deftypefun

@deftypefun ( node-set-params node-id '("label" value) ... )
Using @code{node-set-params} you can set the parameters of the
specified @var{node-id}.
@end deftypefun

@deftypefun ( net-run net-id )
@deftypefunx ( net-run-bg net-id )
@code{net-run} starts processing of the network and waits until completion.
@code{net-run-bg} starts processing of the network and returns immediately.
@end deftypefun


@node Cooked operations, Network setup,, cglame Convenience
@subsection Cooked operations

The following procedures can be customized by defining the
@code{audio-out}, @code{read-file} or @code{write-file} to other
filters than their default ones which are their names.

@deftypefun ( file-to-track file group track )
@deftypefunx ( play-track group track )
@deftypefunx ( play-tracks '(group track) ... )
@deftypefunx ( play filename )
@deftypefunx ( play-eff filename effect '(effect ("label" value) ...) ... )
@deftypefunx ( save-eff infile outfile effect '(effect ("label" value) ...) ... )
@end deftypefun

