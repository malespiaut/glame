@comment $Id: cglame.texi,v 1.13 2001/06/30 10:48:51 richi Exp $

@node Console Frontend, Plugin Collection, Graphical Frontend, Top
@chapter Console Frontend (cglame)

@file{cglame} is GLAME's console interface. Beware! @file{cglame} is
not for whimps but for real men and women who dream in Scheme and
chomp brackets for breakfast. It's for those who want to feel the
ultimate power of GLAME. Thankfully, J. Random User won't have to dive
into the perils of @file{cglame} and will be all happy with @file{glame},
the friendly and intuitive graphical frontend @pxref{Graphical Frontend}.

Still there? Wheee, you're a tough one! Let's see what's in here for you:
This chapter starts with a brief introduction into the @file{cglame} user
interface. Afterwards, the wrapped midlayer and backend APIs are listed, and
an the scheme level API on top will be described.

@strong{WARNING:} this part of the documentation is absolutely not up
to date. For the time being refer to the sources - @code{src/glmid/glscript_*}
files for the glame subsystem wrappers, @code{src/glmid/glame.scm} for some
useful highlevel stuff and @code{src/gui/...} for wrappers to some of the
gui stuff (most useful for creating custom keybindings).

@menu
* cglame Introduction::
* Wrapped API::
* cglame Convenience::
@end menu


@node cglame Introduction, Wrapped API,, Console Frontend
@section cglame Introduction

@file{cglame} is a scripting engine
in the sense that you are presented a @code{guile>} command line prompt
where you can enter scheme expressions. @file{cglame} exposes GLAME's 
midlayer API and the backend API via scheme wrappers. Extra convenience
scripting procedures are defined in the global @file{glame.scm} scheme
file. You can add customisations via your @file{~/.glame.scm} file.

As command line option to @file{cglame} you may specify the
@code{swapfile} to be used. A swapfile is necessary if you want to use any
of the swapfile API procedures. Once started, @file{cglame} presents you with
a command prompt where you can evaluate scheme expressions. An example
session is shown below.

@example
$ cglame

    CGLAME for GLAME version 0.4.0beta, Copyright (C) 1999-2001
    Alexander Ehlert, Richard Guenther, Johannes Hirche, Daniel Kobras.
    CGLAME and GLAME come with ABSOLUTELY NO WARRANTY. This is free
    software, and you are welcome to redistribute it under certain
    conditions.

    Usage: cglame [swapfile]

Quick help:
(quit) gets you out of here.
(help) gets you some additional help.

guile> (play "/var/tmp/short.wav")
guile> (play-eff "/var/tmp/test.wav" '("echo"))
guile> (let* ((net (net-new))
... (nodes (net-add-nodes net '("read_file" "echo" "audio_out")))
... (echo2 (net-add-node net "echo")))
... (node-set-param (car nodes) "filename" "/var/tmp/test.wav")
... (nodes-connect nodes)
... (nodes-connect (list (car nodes) echo2 (caddr nodes)))
... (net-run net))
guile> (quit)
$
@end example

All used scheme procedures which are not documented in the following
sections reside in the @code{glame.scm} file shipped with glame.



@node Wrapped API, cglame Convenience, cglame Introduction, Console Frontend
@section Wrapped API

For description of the semantics of the available parts of the APIs
please refer to the native documentation. Note that all scheme procedures
evaluate to @code{#f} if there is any error. C functions which return
0 on success are transformed to procedures evaluating to @code{#t}
on success or @code{#f} on error. Void functions generally evaluate to
@code{#unspecified}.

@menu
* Scheme Filter API::
* Scheme Swapfile API::
* Scheme Plugin API::
* Scheme GPSM API::
* Scheme GUI interaction::
@end menu

@node Scheme Filter API, Scheme Swapfile API,, Wrapped API
@subsection Scheme Filter API

FIXME: see @code{src/glmid/glscript_filter.c} for more

@deftypefun ( filter-new [filter|plugin] )
@deftypefunx ( filter-add-node filter filter node-name )
@deftypefunx ( filter-connect filter port-name filter port-name )
@deftypefunx ( filter->string filter )
@end deftypefun

@deftypefun ( set-property! object label value )
@deftypefunx ( get-property object label )
These procedures operate on filters, ports, pipes and params.
@end deftypefun

@deftypefun ( filter-launch filter )
@deftypefunx ( filter-start filter )
@deftypefunx ( filter-pause filter )
@deftypefunx ( filter-wait filter )
@deftypefunx ( filter-terminate filter )
@end deftypefun

@deftypefun ( filternetwork-add-input net-id node-id port-name name description )
@deftypefunx ( filternetwork-add-output net-id node-id port-name name description )
@deftypefunx ( filternetwork-add-param net-id node-id param-name name description )
Procedures to be used for exporting ports and params to the outside world
in a macro filter.
@end deftypefun

@deftypefun ( glame_create_plugin filter name )
Create and register a new plugin using the specified name and associate
it with the provided filter. Evaluates to a plugin or to @code{#f} on
error.
@end deftypefun


@node Scheme Swapfile API, Scheme Plugin API, Scheme Filter API, Wrapped API
@subsection Scheme Swapfile API

FIXME: see @code{src/glmid/glscript_swapfile.c}

@node Scheme Plugin API, Scheme GPSM API, Scheme Swapfile API, Wrapped API
@subsection Scheme Plugin API

The glame plugin midlayer API is wrapped with the following
procedures:

@deftypefun ( plugin? plugin )
@deftypefunx ( plugin_add_path path )
@deftypefunx ( plugin_get name )
@deftypefunx ( plugin_name plugin )
@deftypefunx ( plugin_query plugin key )
@deftypefunx ( plugin_set plugin key value )
@end deftypefun

Additionally defined symbols are @code{PLUGIN_DESCRIPTION},
@code{PLUGIN_PIXMAP}, @code{PLUGIN_CATEGORY}, @code{PLUGIN_GUI_HELP_PATH}
and @code{PLUGIN_LABEL}.


@node Scheme GPSM API, Scheme GUI interaction, Scheme Plugin API, Wrapped API
@subsection Scheme GPSM API

The glame gpsm midlayer API is wrapped with the following
procedures:

FIXME. See @code{src/glmid/glscript_gpsm.c}.

@node Scheme GUI interaction, , Scheme GPSM API, Wrapped API
@subsection Scheme GUI interaction

FIXME. See various files in @code{src/gui}.


@node cglame Convenience,, Wrapped API, Console Frontend
@section cglame Convenience

For the convenience procedures online help is (maybe) available
via @code{(help command)} or @code{(help)}.

@menu
* Network setup::
* Cooked operations::
@end menu

@node Network setup, Cooked operations,, cglame Convenience
@subsection Network setup

@deftypefun ( net-new )
Creates a new filternetwork. @code{net-new} evaluates to a
net-id.
@end deftypefun

@deftypefun ( net-add-node net-id node '("label" value) ... )
@deftypefunx ( net-add-nodes net-id node '(node '("label" value) ...) ... )
@deftypefunx ( nodes-delete node-id ... )
@code{net-add-node} adds a single node with optional parameters
to the network specified by @var{net-id}. @code{net-add-nodes}
adds a set of nodes with optional parameters to the network.
@code{net-add-node} evaluates to a @code{node-id}, @code{net-add-nodes}
to a list of @code{node-id}s. Using @code{nodes-delete} you can delete
nodes from a network.
@end deftypefun

@deftypefun ( nodes-connect nodes ... )
@code{nodes-connect} linearily connects the specified lists of
@code{node-id}s.
@end deftypefun

@deftypefun ( node-set-params node-id '("label" value) ... )
Using @code{node-set-params} you can set the parameters of the
specified @var{node-id}.
@end deftypefun

@deftypefun ( net-run net-id )
@deftypefunx ( net-run-bg net-id )
@code{net-run} starts processing of the network and waits until completion.
@code{net-run-bg} starts processing of the network and returns immediately.
@end deftypefun


@node Cooked operations,, Network setup, cglame Convenience
@subsection Cooked operations

The following procedures can be customised by setting
@code{audio-out}, @code{read-file} or @code{write-file} to other
filters than their default ones like @code{(set! read-file "read-mp3")}.

@deftypefun ( play filename )
Plays the specified file.
@end deftypefun

@deftypefun ( play-eff filename '(effect ("label" value) ...) ... )
@deftypefunx ( save-eff infile outfile '(effect ("label" value) ...) ... )
Plays or saves the specified file after applying the specified chain
of effects with parameters.
@end deftypefun

