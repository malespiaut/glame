@comment $Id: swapfile.texi,v 1.9 2001/04/18 16:34:25 richi Exp $

@node Swapfile API, Plugin Interface, Conversion Layer, Top
@chapter Swapfile API

If you have any questions related to the covered (or uncovered but
related) topics in this document, please quote the questionable part of 
this document and send the questions per e-mail to 
@email{glame-devel@@glame.sourceforge.net} (c/o richi).

@menu
* Introduction::		Musings on swapfile philosophy
* Swapfile User Interface::	Detailed description of swapfile API
* TXN User Interface::          Detailed description of TXN API
* TXN Programming Interface::   Transaction programming interface
* PMAP Programming Interface::  Page mapping programming interface
@end menu



@node Introduction, Swapfile User Interface, , Swapfile API
@section Introduction

This is the documentation for the swapfile subsystem of GNU/Linux Audio
Mechanics (GLAME). Swapfile was designed not specifically for GLAME but
with the idea of storing of and operating on large datasets,
specifically audio streams.

Swapfile provides a store for multiple independent sets of (not necessarily)
one-dimensional data. Swapfile supports transparent and unlimited undo and 
redo of all operations.

The swapfile is modeled after a unix filesystem with some additional
features and some restrictions. First, the namespace of the filesystem
is flat, i.e. there are no directories. And the namespace is rather
corse, a file is identified by a unique number, a @code{long}. Also
unlike files on normal filesystems a swapfile file cannot be memory
mapped without restrictions on @var{size} and @var{offset}. This is due
to the advanced features which are the capability to share parts of the
file with other files in a copy on write manner and the
@code{sw_sendfile} operation which allows cutting, inserting and
overwriting one file with the contents of another file without actually
moving any data. Because of this features the internal structure of a
file cannot consist of a set of equally sized and aligned blocks, it
rather consists of a sequence of randomly sized clusters. The memory
mapping restriction is such that only a complete cluster can be mapped.



@node Swapfile User Interface, TXN User Interface, Introduction, Swapfile API
@section Swapfile User Interface

So let's jump into listing the functions of the swapfile API and
document the semantics.

@menu
* Initialisation::
* Namespace Operations::
* File Operations::
@end menu



@node Initialisation, Namespace Operations, , Swapfile User Interface
@subsection Initialisation

To initialize the swapfile subsystem you have to open an existing
swapfile which in turn you may create using either the @file{gmkswap}
utility or the @code{swapfile_creat} function. After finishing operation
you should close it again using @code{swapfile_close}.


@deftypefun int swapfile_open (char *@var{name}, int @var{flags})

@code{swapfile_open()} opens the swapfile with the specified @var{name}
and the specified @var{flags} (no flags are defined yet, use 0). Returns
-1 if it was not possible to open the swapfile or the swapfile is in an
inconsistent state.
@end deftypefun


@deftypefun void swapfile_close (void)

@code{swapfile_close()} closes the swapfile and updates the metadata
state of the on-disk version of the swapfile. This puts the swapfile
into a consistent state.
@end deftypefun


@deftypefun int swapfile_creat (char *@var{name}, size_t @var{size})

Tries to create an empty swapfile on @var{name} of the specified
@var{size}.
@end deftypefun


@deftypefun int swapfile_fsck (char *@var{name}, int @var{force})

Checks the swapfile on @var{name} for consistency and tries to correct
all errors. Useful in case of an unclean swapfile or with @var{force}
specified as 1 rather than 0. Returns 0 on success and -1 on error
(which usually means non correctable errors).
@end deftypefun




@node Namespace Operations, File Operations, Initialisation, Swapfile User Interface
@subsection Namespace Operations


@deftypefun int sw_unlink (long @var{name})

Deletes a name from the filesystem. Like unlink(2).
@end deftypefun


@deftypefun SWDIR* sw_opendir ()

Open the (flat) swapfile directory for reading. The stream
is positioned at the first file. Like opendir(3), but without
directory specification for obvious reason.
@end deftypefun


@deftypefun long sw_readdir (SWDIR* @var{dir})

As the namespace is rather simple the equivalent to readdir(3) is
just returning the names, no directory entry. Anything else
is like readdir(3). If no further entries are available, -1 is returned.
@end deftypefun


@deftypefun int sw_closedir (SWDIR* @var{dir})

Like closedir(3).
@end deftypefun



@node File Operations, , Namespace Operations, Swapfile User Interface
@subsection File Operations


@tindex swfd_t
@tindex txnid_t
@deftypefun swfd_t sw_open (long @var{name}, int @var{flags}, txnid_t @var{tid})

Open a file like open(2) - flags can be @code{O_CREAT}, @code{O_EXCL},
@code{O_RDWR}, @code{O_RDONLY}, @code{O_WRONLY} with same semantics as
open(2).  Returns a file descriptor on success, -1 on error.  The
optional transaction id is used for all operations operating on the file
descriptor, they can be undone and redone this way.
@end deftypefun


@tindex swfd_t
@deftypefun int sw_close (swfd_t @var{fd})

Closes a file descriptor. Like close(2).
@end deftypefun


@tindex swfd_t
@deftypefun int sw_ftruncate (swfd_t @var{fd}, off_t @var{length})

Changes the size of the file @var{fd} like ftruncate(2).
@end deftypefun


@tindex swfd_t
@deftypefun ssize_t sw_sendfile (swfd_t @var{out_fd}, swfd_t @var{in_fd}, size_t @var{count}, int @var{mode})

Tries to copy @var{count} bytes from the current position of @var{in_fd}
to the current position of @var{out_fd} (updating both file pointer
positions). The actual number of copied bytes is returned, or -1 on an
error.

Two different modes are supported (may be or'ed together):
@code{SWSENDFILE_INSERT} inserts into, rather than overwrites or extends
the destination file, @code{SWSENDFILE_CUT} removes copied data from the
source file rather than leaving it unmodified.  The destination file
descriptor may be @code{SW_NOFILE}, in that case no data is actually
written (useful with @code{SWSENDFILE_CUT}).
@end deftypefun


@tindex swfd_t
@deftypefun off_t sw_lseek (swfd_t @var{fd}, off_t @var{offset}, int @var{whence})

Update the file pointer position like lseek(2).
@end deftypefun


@tindex swfd_t
@deftypefun ssize_t sw_read (swfd_t @var{fd}, void *@var{buf}, size_t @var{count})

Like read(2), read @var{count} bytes from the current filepointer
position to the array pointed to by @var{buf}.
@end deftypefun


@tindex swfd_t
@deftypefun ssize_t sw_write (swfd_t @var{fd}, const void *@var{buf}, size_t @var{count})

Like write(2), write @var{count} bytes from @var{buf} starting at the
current filepointer position.
@end deftypefun


@tindex swfd_t
@tindex struct sw_stat
@deftypefun int sw_fstat (swfd_t @var{fd}, struct sw_stat *@var{buf})

Obtain information about the file - works like fstat(2), but with
different struct stat. Also included is information about the actual
(file pointer position, see @code{sw_lseek}) cluster which can be mapped
using @code{sw_mmap}.
@example
struct sw_stat @{
	long name;           /* file name */
	size_t size;         /* file size in bytes */
	int mode;            /* active protection */
	off_t offset;        /* current file pointer position */
	off_t cluster_start; /* start of current cluster */
	off_t cluster_end;   /* end of current cluster */
	size_t cluster_size; /* size of current cluster */
@};
@end example
@end deftypefun


@tindex swfd_t
@deftypefun void *sw_mmap (void *@var{start}, int @var{prot}, int @var{flags}, swfd_t @var{fd})

Maps the actual (file pointer position, see @code{sw_lseek} and
@code{sw_fstat}) cluster into memory with parameters like mmap(2) - no
size or offset need to be specified as they are determined by the actual
cluster offset and size.
@end deftypefun


@deftypefun int sw_munmap (void *@var{start})

Unmaps a previously mapped part of a file. Like munmap(2).
@end deftypefun



@node TXN User Interface, TXN Programming Interface, Swapfile User Interface, Swapfile API
@section TXN User Interface

This is the transaction API which can be used to implement undoing and
redoing operations. For operations to be transactioned, i.e. recorded
on execution those operations need to be transaction aware. See the
section on TXN Programming Interface on how to make your own operations
transaction aware.

All transactions have to be named by an unique transaction id. A new
transaction can be started by @code{txn_begin} which will give you
a new transaction id to which subtransactions can be attached. So usually
any transaction aware operation gets such parent transaction identifier
as argument. Note that ending a transaction via @code{txn_end} does
not free the transaction. This is because you want to be able to use
the transaction for undoing or redoing the operations. If you dont
need to do this it is wise to delete the transaction via @code{txn_delete}
to free the memory associated with it.

You may miss a @code{txn_redo} function for redoing a transaction. This
is by purpose as redo is just another kind of undo. Because of this
analogy the @code{txn_undo} operation returns a new transaction which
can be used to undo this undo operation, i.e. providing a transaction
which does the redo operation.


@tindex txnid_t
@deftypefun txnid_t txn_start (txnid_t @var{parent})

Start a new transaction as child of the provided @var{parent} transaction
(can be @code{TXN_NONE} if the transaction should be a independend one).
Returns a transaction id or -1 on error. On error either the specified
parent transaction does not exist, it has already an active child
(violates transaction may not cross) or there is insufficient memory
to allocate internal data structures.
@end deftypefun


@tindex txnid_t
@deftypefun int txn_end (txnid_t @var{id})

End the specified transaction. Returns 0 on success and -1 on error.
On error either the specified transaction does not exist, it is
already ended or it has active child transactions.
@end deftypefun


@tindex txnid_t
@deftypefun int txn_abort (txnid_t @var{id})

Abort the specified transaction thereby aborting active child
transactions and undoing all previous work. @code{txn_abort} itself is
not undoable. Returns 0 on success, -1 on error which is usually
an invalid supplied transaction id or an inactive transaction.
@end deftypefun


@tindex txnid_t
@deftypefun txnid_t txn_undo (txnid_t @var{id})

Undo applies the reverse transaction as a new transaction,
so @code{txn_undo(txn_undo(id))} restores state after @var{id}, simply
deleting the returned transaction id prevents redo, deleting the original
id after @code{txn_undo} prevents undo after redo.
@end deftypefun


@tindex txnid_t
@deftypefun int txn_delete (txnid_t @var{id})

Delete the specified (inactive) transaction and free all memory
associated with it. Returns 0 on success and -1 on error which
means you have supplied either an invalid or an active transaction.
@end deftypefun


@deftypefun void txn_abort_and_delete_all ()

Abort all active and delete all inactive transactions. This is mainly for
cleanup purposes before program end or after crash. Note that this is
not thread-safe by design, but you have to ensure proper locking
yourself or hope to be lucky... (which is usually ok in case
of normal program termination).
@end deftypefun




@node TXN Programming Interface, PMAP Programming Interface, TXN User Interface, Swapfile API
@section TXN Programming Interface

Well, for now you have to learn by reading existing transaction aware code
which boils down to the swapfile subsystem. Well, for the impatient I
have at least the following very brief tutorial cut&pasted from the
@file{txn.h} headerfile:
@example
struct my_txn_op @{
      struct txn_op op;
      ... data to undo/delete my transaction
@};
int my_operation(txnid_t parent_tid, params...)
@{
      struct my_txn_op *op = malloc(sizeof(struct my_txn_op));
      txnid_t my_tid;
      ... initialization stuff for my_operation
      my_tid = txn_start(parent_tid);
      ... my operation
      op->op.undo = my_txn_undo;
      op->op.del = my_txn_delete;
      op->... stuff to be able to undo/delete the transaction
      txn_finish(my_tid, &op->op);
      ... stuff
@}
@end example

But there are at least two useful functions in the transaction API that
will help you making your operations transaction aware.


@tindex txnid_t
@tindex struct txn_op
@deftypefun int txn_finish (txnid_t @var{id}, struct txn_op *@var{ops})

Finishes a transaction by providing the necessary undo and delete
operations. Will fail if child transactions are there. The transaction
will be ended as in @code{txn_end(txn_start(@var{id}))}.
@end deftypefun


@tindex txnid_t
@deftypefun int txn_finish_unimplemented (txnid_t @var{id}, const char *@var{message})

Finishes a transaction using an implementation that throws an exception,
if the undo operation is required. The supplied message is written to
stderr and a SIGSEGV will be raised.
@end deftypefun



@node PMAP Programming Interface, , TXN Programming Interface, Swapfile API
@section PMAP Programming Interface

This one I consider not that important, so either you have to consult the
headerfile for documentation or wait for me to have lots of spare time.

