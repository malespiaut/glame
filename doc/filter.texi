@comment $Id: filter.texi,v 1.11 2000/02/20 15:23:42 richi Exp $

@node Filter API, Filter Tutorial, Copying, Top
@chapter Filter API

@table @strong
@item NOTE
For a brief overview of the available functions and macros you may
look at the central filter.h headerfile.
The filter subsystem should have settled now. So you may expect
existing API functions and semantics not to change in the near future.

@item NOTE2
This is not a filter programming tutorial! Look for this in a different
file.
@end table

The filter subsystem has three independent APIs, one for the filter registry,
one for filters programming and one for using the filters and connecting them
into so called filter networks.

If you have any questions related to the covered (or uncovered but
related) topics in this document, please quote the questionable part of
this document and send the questions per e-mail to
@email{glame-devel@@glame.sourceforge.net} (c/o richi).

@menu
* Filter Subsystem Introduction::
* Filter Initialisation::
* The Filter Registry API::
* The Filter Programming API::
* The Filter Network API::
@end menu

@node Filter Subsystem Introduction, Filter Initialisation, , Filter API
@section Filter Subsystem Introduction

The filter subsystem introduces the concepts of filters and networks of
filters. The basic idea is to have streams transporting arbitrary data
with attached properties floating through the network consisting of the
so called filter nodes which are connected to each other through the so
called filter pipes. The filter nodes may modify the data in the streams
as the properties. A filter node may even merge two or more streams into
one stream or split one stream into any number of streams containing the
same data and the same properties by reference.
To assist the operation on the stream each filter node may be assigned a
number of parameters. Each filter pipe can be assigned a number of parameters
at both ends, too.

From the APIs view there are two classes of objects, the descriptors and
their instances. Descriptors in the filter subsystem are @code{filter_t},
@code{filter_portdesc_t} and @code{filter_paramdesc_t} with their corresponding
instances @code{filter_node_t}, @code{filter_pipe_t} and @code{filter_param_t}.
@code{filter_pipe_t} is special in this case as a filter pipe is actually
an instance of two filter ports -- it is a connection between those ports.
Not mentioned here is the @code{filter_network_t} instance, a filter network
is an instance of a @code{filter_t}, too. Think of it as an extension of a
filter node. This exchangability of filter nodes and filter networks and their
description as filters is one of the major features of the filter subsystem.

This means that you can set up a network of filters, and in turn convert this
filter network into an abstract filter which you can use in another filter
network by instantiating it.


@node Filter Initialisation, The Filter Registry API, Filter Subsystem Introduction, Filter API
@section Filter Initialisation

To initialize the filter subsystem you have to call @code{filter_init()} somewhere early
in your program. @code{filter_init()} will register a basic set of filters and set up
additionally required structures.

@deftypefun int filter_init (void)
@code{filter_init()} will return 0 on success and -1 on error.
@end deftypefun


@node The Filter Registry API, The Filter Programming API, Filter Initialisation, Filter API
@section The Filter Registry API

The filter registry API is used by the filters to register themselves and by 
any external program which wants to get access to the filter names and their
descriptions.

@menu
* Defining Filter I/O::
* Finding Filters::
* Getting Filter Info::
@end menu

@node Defining Filter I/O, Finding Filters, , The Filter Registry API
@subsection Defining Filter I/O

To register itself, a new filter has to specify its supported input and output
ports and its required and optional parameters. The recommended order of
registration is the following: first allocate a filter structure via
@code{filter_alloc()}. Second in random order register all input ports via
@code{filter_add_input()}, all output ports via @code{filter_add_output()} 
and all parameters
via @code{filter_add_param()}. Third add port specific parameters to the input
and output ports via @code{filterport_add_param()}.
Fourth add the filter to the filter registry using
@code{filter_add()}.

@tindex filter_t
@tindex filter_node_t
@deftypefun {filter_t *} filter_alloc (const char *@var{name}, const char *@var{description}, int (*@var{f})(filter_node_t *))
@code{filter_alloc()} will allocate a new filter structure with the name @var{name}
and the description @var{description}. The filter method will be set to the
provided function @code{@var{f}()} which is the only mandatory method for filters.
@code{filter_alloc()} returns a handle to the filter or @code{NULL} on error.
@end deftypefun

@tindex filter_t
@deftypefun {filter_t *} filter_from_string (const char *@var{name}, const char *@var{description}, const char *@var{filter})
@code{filter_from_string()} is another possibility to create a new filter. Other
than with @code{filter_alloc()} you get a full featured filter, including all
ports and parameters. You just have to add it to the database using @code{filter_add()}. You may want to look at the @code{filternetwork_to_string()} function and the specification of the textual representation of filter networks.
@end deftypefun

@tindex filter_portdesc_t
@tindex filter_t
@deftypefun {filter_portdesc_t *} filter_add_input (filter_t *@var{f}, const char *@var{label}, const char *@var{description}, int @var{type})
@tindex filter_portdesc_t
@tindex filter_t
@deftypefunx {filter_portdesc_t *} filter_add_output (filter_t *@var{f}, const char *@var{label}, const char *@var{description}, int @var{type})
@code{filter_add_input()} and @code{filter_add_output()} add an input or an output port
with the specified @var{label} and @var{description} to the @var{f}. 
@var{type} specifies
the supported connection types as a mask with the additional flag
@code{FILTER_PORTTYPE_AUTOMATIC} which specifies that the port will replicate
itself if more than one connection is requested to it. The currently
supported port types are @code{FILTER_PORTTYPE_SAMPLE}, 
@code{FILTER_PORTTYPE_RMS},
@code{FILTER_PORTTYPE_MISC} and @code{FILTER_PORTTYPE_ANY} which does allow any type
of input or output.
@code{filter_add_input()} and @code{filter_add_output()} will return the port description
structure on success and @code{NULL} on error.
@end deftypefun

@tindex filter_paramdesc_t
@tindex filter_t
@deftypefun {filter_paramdesc_t *} filter_add_param (filter_t *@var{f}, const char *@var{label}, const char *@var{description}, int @var{type})
@deftypefunx {filter_paramdesc_t *} filterport_add_param (filter_portdesc_t *@var{port}, const char *@var{label}, const char *@var{description}, int @var{type})
@code{filter_add_param()} adds a parameter with the specified @var{label} and
@var{description} to the filter. @code{filterport_add_param()} adds a parameter to the specified port, parameter values can be set per pipe. @var{type} specifies the type of the parameter
including a flag @code{FILTER_PARAMTYPE_OUTPUT} which will specify the
parameter as an output one. The currently supported parameter types are
@code{FILTER_PARAMTYPE_INT}, @code{FILTER_PARAMTYPE_FLOAT}, @code{FILTER_PARAMTYPE_SAMPLE},
@code{FILTER_PARAMTYPE_FILE} and @code{FILTER_PARAMTYPE_STRING}.
@code{filter_add_param()} and @code{filterport_add_param()} will return the
parameter description structure on
success and @code{NULL} on error.
@end deftypefun

@deftypefun void filter_delete_port (filter_t *@var{f}, filter_portdesc_t *@var{port})
@code{filter_delete_port()} will remove and destroy the specified port from the filter @var{f}.
@end deftypefun

@deftypefun void filter_delete_param (filter_t *@var{f}, filter_paramdesc_t *@var{param})
@code{filter_delete_param()} will remove and destroy the specified parameter fromthe filter @var{f} or one of its ports.
@end deftypefun

@tindex filter_t
@deftypefun int filter_add (filter_t *@var{f})
@code{filter_add()} will finally add the filter to the registry. After adding
the filter you may not modify it, neither by adding additional inputs
or outputs, nor by adding parameters or changing their types.
@end deftypefun


@node Finding Filters, Getting Filter Info, Defining Filter I/O, The Filter Registry API
@subsection Finding Filters

To query a registered filter you can either directly query the filter by name
or walk through all registered filters. You get a handle to the filter by both
methods which you can access using the later described macros and functions.

@tindex filter_t
@deftypefun {filter_t *} filter_get (char *@var{name})
@code{filter_get()} will return a handle to the filter with the
specified @var{name}, or @code{NULL} if no such filter is registered.
@end deftypefun

@tindex filter_t
@deftypefun {filter_t *} filter_next (filter_t *@var{f})
@code{filter_next()} walks through all available filters in the registry. To
get the first registered filter just supply @code{NULL} to the @var{f}
argument. Else you will get the next registered filter or @code{NULL}
if there are no more filters left.
@end deftypefun


@node Getting Filter Info, , Finding Filters, The Filter Registry API
@subsection Getting Filter Info

To query information about an existing filter like available parameters, output
or input ports the following functions can be used.
@emph{Remember that any structures returned by this functions are strictly read-only.}

@deftypefun {const char *} filter_name (filter_t *@var{f})
@deftypefunx {const char *} filter_description (filter_t *@var{f})
Using @code{filter_name()} and @code{filter_description()} you get access to
the filters name and short description.
@end deftypefun

To access the filters input and output ports and in turn query information
about them you should use the following functions.

@deftypefun int filter_nrinputs (filter_t *@var{f})
@deftypefunx int filter_nroutputs (filter_t *@var{f})
These functions return the number of input and output ports assigned to the
filter @var{f}.
@end deftypefun

@tindex filter_portdesc_t
@tindex filter_t
@deftypefun {filter_portdesc_t *} filter_get_inputdesc (filter_t *@var{f}, const char *@var{label})
@tindex filter_portdesc_t
@tindex filter_t
@deftypefunx {filter_portdesc_t *} filter_get_outputdesc (filter_t *@var{f}, const char *@var{label})
Using these functions you can query the filter about its input and output ports
by name. Both functions return a port description structure which you can access
using the later described functions or @code{NULL} if there is no port with
the specified name.
@end deftypefun

@tindex filter_portdesc_t
@tindex filter_t
@deftypefn Iterator {} filter_foreach_inputdesc (filter_t *@var{f}, filter_portdesc_t *@var{d}) @{ @}
@tindex filter_portdesc_t
@tindex filter_t
@deftypefnx Iterator {} filter_foreach_outputdesc (filter_t *@var{f}, filter_portdesc_t *@var{d}) @{ @}
With these two iterators you can iterate through all available ports of the
filter @var{f} just like in the @code{for} construct using @var{d} as running
variable.
@end deftypefn

To access information of the port description structure and query it about
existing port specific parameters you can use the following functions.

@deftypefun {const char *} filterportdesc_label (filter_portdesc_t *@var{d})
@deftypefunx {const char *} filterportdesc_description (filter_portdesc_t *@var{d})
@deftypefunx int filterportdesc_type (filter_portdesc_t *@var{d})
@code{filterportdesc_label()} and @code{filterportdesc_description} return the
label or the short description of the port. With @code{filterportdesc_type} you
can query the type mask of the pipes allowed to connect.
@end deftypefun

@deftypefun int filterportdesc_nrparams (filter_portdesc_t *@var{d})
Using @code{filterportdesc_nrparams()} you can query the number of port specific
parameters of the port @var{d}.
@end deftypefun

@deftypefun {filter_paramdesc_t *} filterportdesc_get_paramdesc (filter_portdesc_t *@var{d}, const char *@var{label})
With @code{filterportdesc_get_paramdesc()} you can query a port specifiy parameter
by name just like you can do with @code{filter_get_paramdesc()}.
@end deftypefun

@deftypefn Iterator {} filterportdesc_foreach_paramdesc (filter_portdesc_t *@var{d}, filter_paramdesc_t *@var{p})
Using this iterator you can iterate through all available port specific parameters of the port @var{d} like @code{filter_foreach_inputdesc}.
@end deftypefn


To query a filter about existing parameters the following functions do exist.


@deftypefun int filter_nrparams (filter_t *@var{f})
@code{filter_nrparams()} does return the number of parameters of the filters.
@end deftypefun

@tindex filter_paramdesc_t
@tindex filter_t
@deftypefun {filter_paramdesc_t *} filter_get_paramdesc (filter_t *@var{f}, const char *@var{label})
Using @code{filter_get_paramdesc()} you can query a filter about an existing
parameter descriptor by name. @code{filter_get_paramdesc()} returns a parameter
descriptor or @code{NULL} if no parameter with the specified label exists.
@end deftypefun

@tindex filter_paramdesc_t
@tindex filter_t
@deftypefn Iterator {} filter_foreach_paramdesc (filter_t *@var{f}, filter_paramdesc_t *@var{d}) @{ @}
With the @code{filter_foreach_paramdesc} iterator you can iterate through all
available parameter descriptors of a filter.
@end deftypefn


To access the various fields of the parameter description structure
the following functions should be used.

@deftypefun {const char *} filterparamdesc_label (filter_paramdesc_t *@var{d})
@deftypefunx {const char *} filterparamdesc_description (filter_paramdesc_t *@var{d})
These functions return the label and the short description of the parameter
described by the parameter descriptor @var{d}.
@end deftypefun

@deftypefun int filterparamdesc_type (filter_paramdesc_t *@var{d})
Using this function you can query a parameter descriptor about the type of
the parameter. See @code{filter_add_param()} for a list of available
parameter types.
@end deftypefun


@node The Filter Programming API, The Filter Network API,The Filter Registry API, Filter API
@section The Filter Programming API

The filter programming API consists of functions to receive, create and forward
buffers, of functions to access the connections made to the filters ports and
of functions to get and set the filters parameters. The filter programming API
also defines the semantics of the methods provided by the filters itself as
they are used by the filter network API.

@menu
* Filter Methods::
* Accessing Filter Ports and Parameters::
* Doing Real Work::
* Working on SAMPLEs::
@end menu

@node Filter Methods, Accessing Filter Ports and Parameters, , The Filter Programming API
@subsection Filter Methods

Let's start with defining the semantics of the methods a filter can provide.
All methods are stored in the 
@tindex filter_t
filter_t structure, but only the f method is
mandatory. You have to set all other methods manually as sane defaults are
provided for them. To learn about semantic details you may want to look into
the @code{src/filter/filter_network.c} file, too.

@tindex filter_node_t
@deftypefn Method int f (filter_node_t *@var{n})
@code{f()} is the main method of every filter, it's the only mandatory method,
too. @code{f()} does the filter work, i.e. it gets launched as thread once the
filter network starts operating. See below for what to do in this
method. You have to return -1 if you don't like anything of the setup,
which will terminate the whole network, or 0 if all was ok and you
are finished with processing.

Required parts of the @code{f()} method are an initialization section which
must be ended by the call of the @code{FILTER_AFTER_INIT} macro and a cleanup
section which @code{FILTER_BEFORE_CLEANUP} has to precede. In the initialization
section you may not use any functions which may block on the network. You may
return -1 at any point during the initialization indicating an error. In the
cleanup section you must return with a value of zero indicating success. See
the filter tutorial for further advise.
@end deftypefn

@tindex filter_node_t
@deftypefn Method int init (filter_node_t *@var{n})
@code{init()} gets called by the @code{filternetwork_add_node()} function after allocating a
new instance of a filter (the so called filternode). You may do
anything with the private field of the filternode, everything else is strictly
private.
@end deftypefn

@tindex filter_node_t
@tindex filter_pipe_t
@deftypefn Method int connect_out (filter_node_t *@var{source}, const char *@var{port}, filter_pipe_t *@var{p})
@code{connect_out()} is invoked by the @code{filternetwork_add_connection()} function.
@code{connect_out()} gets called at each connection request to an output port
but before the call to the @code{connect_in()} method of the corresponding
destination port. You may reject the connection by returning -1 or
accept it by returning 0. You should set up the pipe type and the
corresponding fields in the type-specific union using the appropriate macros.
You may modifiy the pipe's source, i.e. perform
redirections---but be careful.
@end deftypefn

@tindex filter_node_t
@tindex filter_pipe_t
@deftypefn Method int connect_in (filter_node_t *@var{dest}, const char *@var{port}, filter_pipe_t *@var{p})
@code{connect_in()} is like @code{connect_out()} but gets called after the 
@code{connect_out()}
call, and you don't have to set up any type specific information in the
filter pipe @var{p}. Just return -1 if you don't like the connection. 
Otherwise return 0. Redirections of the destination may be done under the
same conditions as in @code{connect_out()}.
@end deftypefn

@tindex filter_node_t
@deftypefn Method int fixup_param (filter_node_t *@var{n}, filter_pipe_t *@var{p}, const char *@var{name}, filter_param_t *@var{param})
@code{fixup_param()} gets called by @code{filternode_set_param()} or
@code{filterpipe_set_*param()} if the @var{p} parameter is not @code{NULL}. I.e.
you may accept or
reject a parameter change for the filter. Return -1 if you do not like
anything about the setup. You have to fix the pipe parameters of
affected output ports. Returning -1 does not revert a parameter change. Use
@code{filternode_set_param()} and friends to correct wrong parameter values.
In this method you may break an existing connection by using @code{filternetwork_break_connection()}.
@end deftypefn

@tindex filter_node_t
@tindex filter_pipe_t
@deftypefn Method int fixup_pipe (filter_node_t *@var{n}, filter_pipe_t *@var{in})
@code{fixup_pipe()} gets called by @code{filternetwork_add_connection()} and possibly by a source
filter to tell about changes in an input ports pipe.
In both cases you are required to adjust all affected connected output
pipes with respect to their types and parameters. You also have to
forward the fixup request to any changed pipe by calling its
destination's fixup method.
@end deftypefn

@tindex filter_node_t
@tindex filter_pipe_t
@deftypefn Method void fixup_break_in (filter_node_t *@var{n}, filter_pipe_t *@var{in})
@tindex filter_node_t
@tindex filter_pipe_t
@deftypefnx Method void fixup_break_out (filter_node_t *@var{n}, filter_pipe_t *@var{out})
@code{fixup_break_in()} and @code{fixup_break_out()} are called by all connection
breaking functions. You are required to check the setup after the
breaking of the connection and do anything which is necessary to
return to a sane state. The provided pipes are disconnected already.
@end deftypefn



@node Accessing Filter Ports and Parameters, Doing Real Work, Filter Methods, The Filter Programming API
@subsection Accessing Filter Ports and Parameters

As important as the semantics of the filters methods are the functions through
which a filter can access the pipes connected through the input and output ports and the parameters at the filter node scope as well as at the pipe scope. The
description of these functions will follow.

@deftypefun {const char *} filternode_name (filter_node_t *@var{n})
Using this function you get access to the name of the filternode @var{n}.
@end deftypefun

@deftypefun int filternode_nrinputs (filter_node_t *@var{n})
@deftypefunx int filternode_nroutputs (filter_node_t *@var{n})
These functions return the number of connections on the input and output ports.
@end deftypefun

@tindex filter_pipe_t
@tindex filter_node_t
@deftypefun {filter_pipe_t *} filternode_get_input (filter_node_t *@var{n}, const char *@var{label})
@tindex filter_pipe_t
@tindex filter_node_t
@deftypefunx {filter_pipe_t *} filternode_get_output (filter_node_t *@var{n}, const char *@var{label})
@tindex filter_pipe_t
@deftypefunx {filter_pipe_t *} filternode_next_input (filter_pipe_t *@var{p})
@tindex filter_pipe_t
@deftypefunx {filter_pipe_t *} filternode_next_output (filter_pipe_t *@var{p})
The @code{filternode_get_*()} functions provide you with access to the filter
nodes connections on the specified input or output port by name. If there
are more than one connection on a port you may cycle through all connections
using the @code{filternode_next_*()} functions which
will return the next connection on the same port where
the first connection on the port was accessed using @code{filternode_get_*()}
functions. This is useful for ports with the @code{FILTER_PORTTYPE_AUTOMATIC}
flag set only.
@end deftypefun

@tindex filter_node_t
@tindex filter_pipe_t
@deftypefn Iterator {} filternode_foreach_input (filter_node_t *@var{n}, filter_pipe_t *@var{p}) @{ @}
@tindex filter_node_t
@tindex filter_pipe_t
@deftypefnx Iterator {} filternode_foreach_output (filter_node_t *@var{n}, filter_pipe_t *@var{p}) @{ @}
These programming structures loop through all connections on input or
output ports of the specified filter node.
This is especially useful for filters with only one input or output port
which additionally is of the type @code{FILTER_PORTTYPE_AUTOMATIC}. It acts
like the @code{for} construct, i.e. the parameter @var{p} is assigned 
the input or output pipe on each loop iteration.
@end deftypefn

@tindex filter_pipe_t
To access information contained in the @code{filter_pipe_t} structures returned
by the above functions, you may use the following functions. Also functions
to access the per pipe end parameters are described here.

@deftypefun int filterpipe_type (filter_pipe_t *@var{p})
@deftypefunx int filterpipe_sample_rate (filter_pipe_t *@var{p})
@code{filterpipe_type} allows you to query the type of the pipe. 
With the appropriate
type specific function you can get access to the type specific parameters of
the pipe.
@end deftypefun

@findex connect_out
@findex fixup_param
To initialize the pipe inside the @code{connect_out()} or the 
@code{fixup_param()} method you
should use one of the following boilerplate functions:

@deftypefun void filterpipe_settype_sample (filter_pipe_t *@var{p}, int @var{rate})
@tindex FILTER_PIPETYPE_SAMPLE
This sets the pipe type to @code{FILTER_PIPETYPE_SAMPLE} and 
initializes the type
specific @code{rate} field to the value provided.
@end deftypefun

@deftypefun {filter_param_t *} filterpipe_get_sourceparam (filter_pipe_t *@var{p}, const char *@var{label})
@deftypefunx {filter_param_t *} filterpipe_get_destparam (filter_pipe_t *@var{p}, const char *@var{label})
With these functions you get access to the set parameters on the source
or the destination end of a pipe by name.
@end deftypefun


To get access to the parameters of a filter node and to access the information
contained inside the @code{filter_param_t} structure, the following functions
are provided.

@tindex filter_param_t
@tindex filter_node_t
@deftypefun {filter_param_t *} filternode_get_param (filter_node_t *@var{n}, const char *@var{label})
This function will provide you with access to a nodes parameter by name.
@code{filternode_get_param()} will return a @code{filter_param_t} structure which
you can access using the later described macros and functions. This function
will return @code{NULL}, if either no such parameter does exist or it was never
set.
@end deftypefun

@deftypefun int filterparam_val_int (filter_param_t *@var{p})
@deftypefunx float filterparam_val_float (filter_param_t *@var{p})
@deftypefunx fileid_t filterparam_val_file (filter_param_t *@var{p})
@deftypefunx SAMPLE filterparam_val_sample (filter_param_t *@var{p})
@deftypefunx {char *} filterparam_val_string (filter_param_t *@var{p})
These macros return the value of the parameter. You should use the macro
which corresponds to the parameter type (which you should know anyway or
you can obtain from the corresponding parameter descriptor structure).
@end deftypefun

@deftypefun {char *} filterparam_to_string (filter_param_t *@var{p})
@deftypefunx {void *} filterparamval_from_string (filter_paramdesc_t *@var{d}, const char *@var{val})
With these functions conversion between strings and parameters is supported.
Both functions return pointers to storage you have to free by your own.
@end deftypefun




@node Doing Real Work, Working on SAMPLEs, Accessing Filter Ports and Parameters, The Filter Programming API
@subsection Doing Real Work

Now what to do inside the @code{f()} method? Receiving, modifying, creating, and
forwarding streams of data which are grouped into buffers. This leads us to the
filter buffer API. A filter buffer is obtained using one of the following
functions:

@tindex filter_buffer_t
@tindex filter_node_t
@deftypefun {filter_buffer_t *} fbuf_alloc (int @var{size}, struct list_head *@var{list})
@code{fbuf_alloc()} will allocate a new buffer with space for @var{size}
bytes. The list parameter is to 
keep track of allocated buffers for cleanup after failures. You may want to
supply @code{&n->launch_context->buffers} for @var{list}.
This function can return @code{NULL}, if there is not sufficient memory available.
@end deftypefun

@tindex filter_buffer_t
@tindex filter_pipe_t
@deftypefun {filter_buffer_t *} fbuf_get (filter_pipe_t *@var{p})
@code{fbuf_get()} will receive the next filter buffer from the specified input
pipe. This will return @code{NULL} at @code{EOF}. You have to forward this 
@code{EOF} mark. @code{fbuf_get()} copes with a @code{NULL} @var{p} with just
returning @code{NULL}.
@end deftypefun

All filter buffers are reference counted to allow zero-copy and copy-on-demand
operations. Both @code{fbuf_alloc()} and @code{fbuf_get()} will return with one reference of the
buffer held. To get additional references or to drop one reference use the
following functions:

@tindex filter_buffer_t
@deftypefun void fbuf_ref (filter_buffer_t *@var{fb})
@code{fbuf_ref()} will get you one additional reference. A reference will
protect the buffer from being modified and from being destroyed. Once
the reference count drops to zero, you may no longer access it or any
of its contents. @code{fbuf_ref()} does not copy the buffer. @code{fbuf_ref()}
ignores @code{NULL} @var{fb}s.
@end deftypefun

@tindex filter_buffer_t
@deftypefun void fbuf_unref (filter_buffer_t *@var{fb})
@code{fbuf_unref()} will drop one reference. See above for more about
references. @code{fbuf_unref} ignores @code{NULL} @var{fb}s.
@end deftypefun

To get information on a filter buffer and to access its contents, use the
following functions which are actually very fast macros:

@tindex filter_buffer_t
@deftypefun int fbuf_size (filter_buffer_t *@var{fb})
@code{fbuf_size()} returns the number of bytes in the filter buffer.
@code{fbuf_size()} returns 0 if @var{fb} is @code{NULL}.
@end deftypefun

@tindex filter_buffer_t
@deftypefun {char *} fbuf_buf (filter_buffer_t *@var{fb})
@code{fbuf_buf()} returns a pointer to the buffer contents.
@end deftypefun

If you want to modify a buffer directly rather than reading from a received one
and storing into a freshly allocated one, you have to make the buffer private.
This additional requirement makes copy-on-demand and zero-copy possible. Use
@code{fbuf_make_private()}:

@tindex filter_buffer_t
@deftypefun {filter_buffer_t *} fbuf_make_private (filter_buffer_t *@var{fb})
@code{fbuf_make_private()} will return a private copy of the provided buffer
which you may modify. @code{fbuf_lock()} will not copy the buffer if you are the
sole user of the buffer, i.e. the reference count is one. For a @code{NULL}
@var{fb} @code{fbuf_mark_private()} returns @code{NULL}.
@end deftypefun

To forward a filter buffer you have to hold one reference for each output pipe
you send the buffer to. Buffer sending is done using the following function:

@tindex filter_pipe_t
@tindex filter_buffer_t
@deftypefun void fbuf_queue (filter_pipe_t *@var{p}, filter_buffer_t *@var{fb})
@code{fbuf_queue()} queues the specified filter buffer to the specified pipe.
One reference gets eaten by this operation. @code{fbuf_queue()} copes with
a @code{NULL} @var{p} by unref'ing @var{fb}.
@end deftypefun

For extended protocols on top of the @code{fbuf} API you may look into 
@xref{Working on SAMPLEs}.


@node Working on SAMPLEs, , Doing Real Work, The Filter Programming API
@subsection Working on SAMPLEs

There is one extended protocol defined at the moment. This is the sbuf
protocol which is just a very simple @code{SAMPLE}-only 
transportation protocol with no fields in the header actually used. 
So only the functions with parameters or semantics different from their
@code{fbuf_*} equivalents are listed here. As for the rest, you may assume that
wrappers exist with the appropriate @code{sbuf_*} name but the same parameters
and semantics as described in the @code{fbuf_*} sections.

@deftypefun {filter_buffer_t *} sbuf_alloc (int @var{size}, filter_node_t *@var{n})
@code{sbuf_alloc()} allocates a new buffer containing space for @var{size}
numbers
of @code{SAMPLE}s and assigns the buffer to the filter node @var{n}.
@end deftypefun
@deftypefun int sbuf_size (filter_buffer_t *@var{fb})
@code{sbuf_size()} returns the size of the buffer as number of @code{SAMPLE}s.
@end deftypefun
@deftypefun {SAMPLE *} sbuf_buf (filter_buffer_t *@var{fb})
@code{sbuf_buf()} returns a pointer to this buffer.
@end deftypefun


@node The Filter Network API, , The Filter Programming API, Filter API
@section The Filter Network API

The filter network API provides functions to construct and run arbitrary
networks of filters. This part of the filter API is intended to be used by the
high level part of the glame project, i.e. the console and the graphical user
interface. You can learn from the various test programs, too.

@menu
* Creating a Filter Network::
* Processing Data in a Network::
* Using Filter Networks as Filters::
* Textual Representation of Filter Networks::
@end menu

@node Creating a Filter Network, Processing Data in a Network, , The Filter Network API
@subsection Creating a Filter Network

First constructing such a network of filters is documented by referencing and
commenting the necessary functions to do so.

@tindex filter_network_t
@deftypefun {filter_network_t *} filternetwork_new (const char *@var{name})
@code{filternetwork_new()} allocates and initializes a new filter network
descriptor to which subsequent filters can be added and connections 
between those filters can be established. You have to provide a name for
it, too.
@code{filternetwork_new()} returns a handle to the new filter network or @code{NULL},
if an error occured.
@end deftypefun

@tindex filter_network_t
@deftypefun void filternetwork_delete (filter_network_t *@var{net})
@code{filternetwork_delete()} deletes the filter network and all its contained
filter nodes.
@end deftypefun

@deftypefun int filternetwork_nrnodes (filter_network_t *@var{net})
@deftypefunx {filter_node_t *} filternetwork_get_node (filter_network_t *@var{net}, const char *@var{name})
With these functions you can query the number of nodes in the network and
get access to them by name.
@end deftypefun

@deftypefn Iterator {} filternetwork_foreach_node (filter_network_t *@var{net}, filter_node_t *@var{node})
This iterator iterates through all nodes in the network.
@end deftypefn


@tindex filter_node_t
@tindex filter_network_t
@deftypefun {filter_node_t *} filternetwork_add_node (filter_network_t *@var{net}, const char *@var{f}, const char *@var{name})
@code{filternetwork_add_node()} creates an instance of a filter with the
provided identifier and adds it to the set of filters of the
specified filter network. The node is given the provided @var{name}, or a
unique one is chosen automatically if you pass @code{NULL}.
@code{filternetwork_add_node()} returns a handle to the instance of a filter,
a filter node or @code{NULL}, if an error occured.
@end deftypefun

@tindex filter_node_t
@deftypefun void filternode_delete (filter_node_t *@var{node})
@code{filternode_delete()} deletes the filter node and breaks all established
connections and deletes all set parameters.
@end deftypefun

@tindex filter_pipe_t
@tindex filter_node_t
@deftypefun {filter_pipe_t *} filternetwork_add_connection (filter_node_t *@var{source}, const char *@var{source_port}, filter_node_t *@var{dest}, const char *@var{dest_port})
@code{filternetwork_add_connection()} connects two filter nodes by using the output port
specified as @var{source_port} and the input port specified by @var{dest_port}.
@code{filternode_add_connection()} returns the internal representation structure of
the connection, a filter pipe on success or @code{NULL} if any party
disliked the connection.
@end deftypefun

@tindex filter_pipe_t
@deftypefun void filternetwork_break_connection (filter_pipe_t *@var{p})
@code{filternetwork_break_connection()} breaks a previously established
connection. Note that in the process of breaking a connection some
filter nodes may decide to break additional connections to return
to a sane state of the network.
@end deftypefun

@tindex filter_node_t
@deftypefun int filternode_set_param (filter_node_t *@var{n}, const char *@var{label}, void *@var{val})
@code{filternode_set_param()} sets the parameter with the specified @var{label}
of the filter node @var{n} to the value pointed to by @var{val}. The type of the value
pointed at can be obtained by using the @code{filter_get_paramdesc()} function
operating on the filter of the filter node.
@code{filternode_set_param()} returns 0 on success or -1 if the parameter set or
change is not possible or causes any problems in the network.
@end deftypefun

@deftypefun int filterpipe_set_sourceparam (filter_pipe_t *@var{p}, const char *@var{label}, void *@var{val})
@deftypefunx int filterpipe_set_destparam (filter_pipe_t *@var{p}, const char *@var{label}, void *@var{val})
With these functions you can set the per pipe-end parameters just like you
can set parameters using @code{filternode_set_param}.
@end deftypefun



@node Processing Data in a Network, Using Filter Networks as Filters, Creating a Filter Network, The Filter Network API
@subsection Processing Data in a Network

To start processing data with a constructed network the following functions are
provided:

@tindex filter_network_t
@deftypefun int filternetwork_launch (filter_network_t *@var{net})
@code{filternetwork_launch()} asynchronously starts the init phase of a previously
constructed filter network using a set of filter threads.
@code{filternetwork_launch()} returns -1 if there were any problems launching
the filter network or 0 on success.
Errors in the initialisation process of the filters' @code{f()} methods are not
reported by @code{filternetwork_launch()} but can instead be obtained by using
@code{filternetwork_wait()} or @code{filternetwork_start()}. Processing of
the data is not started until @code{filternetwork_start()} is called.
@end deftypefun

@tindex filter_network_t
@deftypefun int filternetwork_start (filter_network_t *@var{net})
@deftypefunx int filternetwork_pause (filter_network_t *@var{net})
With @code{filternetwork_start()} you can start processing data on a
previously launched or paused network. With @code{filternetwork_pause()}
you can temporarily stop processing of any data in a previously started
network. Both functions return -1 if any error occured in the process of
starting or pausing or in the network threads.
@end deftypefun

@tindex filter_network_t
@deftypefun int filternetwork_wait (filter_network_t *@var{net})
@code{filternetwork_wait()} waits for a previously launched filter network to
finish processing.
@code{filternetwork_wait()} returns 0 if the filter network terminated
regularly, and -1 if there were any errors, either in waiting for the
network or in processing the network.
@end deftypefun

@tindex filter_network_t
@deftypefun void filternetwork_terminate (filter_network_t *@var{net})
@code{filternetwork_terminate} kills a previously launched filter network and
does not wait for it to finish processing any data.
@end deftypefun


@node Using Filter Networks as Filters, Textual Representation of Filter Networks, Processing Data in a Network, The Filter Network API
@subsection Using Filter Networks as Filters

To save a filter network and reuse it as regular filter the following
functions are provided:

@tindex filter_network_t
@deftypefun {char *} filternetwork_to_string (filter_network_t *@var{net})
@code{filternetwork_to_string()} saves the current state of the filter
network into a string and returns a pointer to it. NULL is returned on
error. You have to free the returned string later.
@end deftypefun

@tindex filter_network_t
@deftypefun {filter_network_t *} filternetwork_from_string (const char *@var{net})
@code{filternetwork_from_string()} creates a filternetwork out of the
description stored in @var{net}. Returns the filternetwork identifier or NULL
on error.
@end deftypefun

@tindex filter_t
@deftypefun {filter_t *} filter_from_string (const char *@var{name}, const char *@var{description}, const char *@var{f})
@code{filter_from_string()} takes a literal description of a filternetwork
and turns it into an instantiatable filter. You have still to add the filter
to the database using @code{filter_add()}. Returns the filter identifier or
NULL on error.
@end deftypefun


@node Textual Representation of Filter Networks, , Using Filter Networks as Filters, The Filter Network API
@subsection Textual Representation of Filter Networks

FIXME, this section still has to be written. For now, an example should provide
enough information.

@example
(filternetwork play
        (node rf read_file
                (export-param filename filename "file to be played")
        )
        (node aout audio_out)
        (connect rf out aout left_in)
        (connect rf out aout right_in)
)
@end example

Brief summary about allowed commands in the contexts.

@table @code
@item filternetwork
@code{node}, @code{connect}, @code{set-param}

@item node
@code{export-param}, @code{export-input}, @code{export-output}, @code{set-param}

@item connect
@code{set-sourceparam}, @code{set-destparam}
@end table

In other contexts, no commands are allowed.
