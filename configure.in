dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(glame, 0.5.0CVS)
AM_CONFIG_HEADER(config.h)

dnl Pick up additional macros from the macros directory
AM_ACLOCAL_INCLUDE(macros)


dnl
dnl Switches to configure debugging stuff - sane default for now.
dnl

AC_ARG_ENABLE(debug,
[  --enable-debug          include lots of debugging code 
  --disable-debug         compile for maximum optimization], debug=$enableval, debug=1)
if test "$debug" = "no"; then
	debug=0
elif test "$debug" = "yes"; then
	debug=2
fi
if test $debug -eq 2; then
	AC_DEFINE(DEBUG)
elif test $debug -eq 0; then
	AC_DEFINE(NDEBUG)
fi

dnl Allow to override swapfile debugging level
AC_ARG_ENABLE(swapfiledebug,
[  --enable-swapfiledebug  include lots of timeconsuming checks to swapfile 
  --disable-swapfiledebug compile for maximum optimization], swdebug=$enableval, swdebug=$debug)
if test "$swdebug" = "no"; then
	swdebug=0
elif test "$swdebug" = "yes"; then
	swdebug=2
fi
if test $swdebug -eq 2; then
	AC_DEFINE(SWDEBUG)
fi


dnl
dnl Checks for programs.
dnl

dnl Compiling without gcc is not supported but may succeed.
AC_PROG_CC
if test "$GCC" = "yes"; then
	AC_DEFINE(HAVE_GCC)
	if test $debug -eq 0; then
		CFLAGS="-Wall -O3 -fomit-frame-pointer -ffast-math -fstrict-aliasing"
	elif test $debug -eq 1; then
		CFLAGS="$CFLAGS -Wall"
	else
		CFLAGS="-Wall -g -O0"
	fi
else
  AC_MSG_ERROR([Compilers other than gcc are not supported])
fi

AC_PROG_INSTALL
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL



dnl FIXME: The next two checks break cross-compiling.
dnl        Unfortunately run-time checks would mean performance impacts or are
dnl        simply not an option. [dk]

dnl Check endianness
AC_C_BIGENDIAN
AC_CHECK_HEADER(byteswap.h,AC_DEFINE(HAVE_BYTESWAP_H),)

dnl Check width of basic types
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)


dnl
dnl Switch to make SAMPLE a double - float is default.
dnl

AC_ARG_ENABLE(double, [  --enable-double         use doubles instead of floats (not recommended)], sample=$enableval, sample=float)
if test "$sample" = "no"; then
	sample=float
elif test "$sample" = "yes"; then
	sample=double
	AC_MSG_WARN([Using double for SAMPLE which is not supported])
fi
if test "$sample" = "float"; then
	AC_DEFINE(SAMPLE_FLOAT)
fi
AC_DEFINE_UNQUOTED(SAMPLE, $sample)

dnl
dnl Switch to use low latency buffer sizes.
dnl

AC_ARG_ENABLE(low-latency, [  --enable-low-latency     use small buffers to reduce latency], lowlatency=$enableval, lowlatency=no)
if test x$lowlatency = xyes; then
	AC_MSG_WARN([Using small buffers to ensure low latency])
	AC_DEFINE(LOW_LATENCY)
fi


dnl
dnl Checks for libraries.
dnl use GLAME_LIBS & GLAME_CFLAGS
dnl and GLAME_DLIBS & GLAME_DCFLAGS
dnl



dnl
dnl First check all _required_ stuff
dnl


dnl
dnl pthread lib - GLAME is threaded everywhere, so global
dnl LIBS and CFLAGS use is necessary
dnl

ACX_PTHREAD([
LIBS="$PTHREAD_LIBS"
CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
CC="$PTHREAD_CC"
AC_DEFINE(USE_PTHREADS)
], [
AC_MSG_ERROR(You need pthreads to run glame!)
])

dnl
dnl GUILE check, we absolutely need it, so fail if its not there
dnl the check has AM_CONDITIONAL(GUILE, ...) and defines HAVE_GUILE
dnl

ACG_CHECK_GUILE(1.3.4, , [
AC_MSG_ERROR([You need at least guile 1.3.4 to run glame!
Hint: You also need to have the appropriate guile development package
installed, usually called libguile-dev, guile-devel, or similar.])
])

dnl
dnl We also need libxml
dnl

AMG_PATH_XML(1.8.0, , [
AC_MSG_ERROR([You need at least libxml 1.8.0 to run glame!
Hint: You also need to have the appropriate xml development package
installed, usually called libxml-dev, libxmld, or similar.])
])


dnl
dnl The rest is optional stuff
dnl


dnl
dnl GUI stuff - require GNOME for anything
dnl

dnl switch to disable gui
AC_ARG_ENABLE(gui, [  --disable-gui           GUI - needs recent GTK/GNOME ], gui=$enableval, gui=yes)

dnl GNOME check
if test x$gui = xyes; then
  GNOME_INIT_HOOK([have_gnome=yes],,)
  if test ! x$have_gnome = xyes; then
	AC_MSG_ERROR([You need gnome to compile the graphical user interface.
Hint: you also need the appropriate development packages for gnome installed,
usually called gnome-dev, libgnome-dev or similar. You can disable the
graphical user interface by providing the --disable-gui switch to the
configure script.])
  fi
else
  AC_MSG_RESULT([GUI was disabled.])
fi
AM_CONDITIONAL(HAVE_GNOME, test x$have_gnome = xyes)

dnl libglade check -- HACK - the gnome check above suxx
if test x$gui = xyes -a x$have_gnome = xyes; then
  glade=yes
dnl HACK - autoconf suxx
  ac_saved_cpp=$ac_cpp
  ac_cpp="$ac_cpp `glib-config --cflags`"
  AC_CHECK_HEADER([glade/glade.h], , glade=no)
  AC_CHECK_LIB(glade, glade_init, , glade=no, [$GNOME_LIBS])
  if test x$glade = xyes; then
    AC_DEFINE(HAVE_LIBGLADE)
  fi
  ac_cpp=$ac_saved_cpp
fi



dnl
dnl check for single/double precision fftw
dnl
if test "$sample" = "float"; then
	AC_CHECK_LIB(sfftw, fftw2d_create_plan, fftw=yes, fftw=no)
	AC_CHECK_HEADER(sfftw.h,, fftw=no)
	if test $fftw = yes; then
		GLAME_FFT_LIBS="$GLAME_FFT_LIBS -lsfftw -lsrfftw"
		AC_DEFINE(HAVE_FFTW)
	fi
elif test "$sample" = "double"; then
	AC_CHECK_LIB(fftw, fftw2d_create_plan, fftw=yes, fftw=no)
	AC_CHECK_HEADER(fftw.h,, fftw=no)
	if test $fftw = yes; then
		GLAME_FFT_LIBS="$GLAME_FFT_LIBS -lfftw -lrfftw"
		AC_DEFINE(HAVE_FFTW)
	fi
fi
AM_CONDITIONAL(HAVE_FFTW, test x$fftw = xyes)


dnl
dnl Checks for various audio stuff.
dnl

dnl check for libaudiofile, use audiofile-config, if available
AC_CHECK_PROG(afconfig, audiofile-config, yes, no)
if test $afconfig = no; then
	AC_CHECK_LIB(audiofile, afCloseFile, laf=yes, laf=no)
	AC_CHECK_HEADER(audiofile.h,, laf=no)
	if test $laf = yes; then
		GLAME_AUDIO_LIBS="$GLAME_AUDIO_LIBS -laudiofile"
		AC_DEFINE(HAVE_AUDIOFILE)
	fi
else
	GLAME_AUDIO_LIBS="$GLAME_AUDIO_LIBS `audiofile-config --libs`"
	GLAME_AUDIO_CFLAGS="$GLAME_AUDIO_CFLAGS `audiofile-config --cflags`"
	AC_DEFINE(HAVE_AUDIOFILE)
fi

dnl check for libsndfile - FIXME
lsf=no
if test $lsf = yes; then
	GLAME_AUDIO_LIBS="$GLAME_AUDIO_LIBS -lsndfile"
	AC_DEFINE(HAVE_SNDFILE)
fi

dnl
dnl check for lame - doesnt work with static only libmp3lame,
dnl so disable is possible
dnl
AC_ARG_ENABLE(mp3lame, [  --disable-mp3lame        disable mp3lame support], lame=$enableval, lame=yes)
if test x$lame = xyes; then
	AC_CHECK_HEADERS([lame/lame.h lame.h], lame=yes, lame=no)
fi
if test x$lame = xyes; then
	AC_CHECK_LIB(mp3lame, lame_decode, lame=yes, lame=no)
fi
if test x$lame = xyes; then
	GLAME_AUDIO_LIBS="$GLAME_AUDIO_LIBS -lmp3lame"
	AC_DEFINE(HAVE_LAME)
fi


dnl check for OSS
dnl BSD keeps the header file
dnl in sys/, Linux in linux/, 
dnl other Unices in machine/
AC_CHECK_HEADER(linux/soundcard.h, oss=yes, oss=no)
if test $oss = yes; then
	AC_DEFINE(HAVE_OSS)
	AC_DEFINE(HAVE_OSS_LINUX)
else
	AC_CHECK_HEADER(sys/soundcard.h, oss=yes, oss=no)
	if test $oss = yes; then
		AC_DEFINE(HAVE_OSS)
		AC_DEFINE(HAVE_OSS_SYS)
	else 
		AC_CHECK_HEADER(machine/soundcard.h, oss=yes, oss=no)
		if test $oss = yes; then
			AC_DEFINE(HAVE_OSS)
			AC_DEFINE(HAVE_OSS_MACHINE)
		fi
	fi
fi
AM_CONDITIONAL(HAVE_OSS, test x$oss = xyes)

dnl check for esd
AM_PATH_ESD(0.2.0, esd=yes, esd=no)
if test $esd = yes; then
	GLAME_AUDIO_CFLAGS="$GLAME_AUDIO_CFLAGS $ESD_CFLAGS"
	AC_DEFINE(HAVE_ESD)
fi
AM_CONDITIONAL(HAVE_ESD, test x$esd = xyes)

dnl check for native IRIX audio
AC_CHECK_LIB(audio, alWriteBuffers, sgi=yes, sgi=no)
AC_CHECK_HEADER(dmedia/audio.h,, sgi=no)
if test $sgi = yes; then
	SGIAUDIO_LIBS="-laudio"
	AC_DEFINE(HAVE_SGIAUDIO)
	AC_SUBST(SGIAUDIO_LIBS)
fi
AM_CONDITIONAL(HAVE_SGI, test x$sgi = xyes)

dnl check for ALSA
ACG_PATH_ALSA(0.5.0, alsa="yes", alsa="no")
if test "x$alsa" = xyes; then
	GLAME_AUDIO_CFLAGS="$GLAME_AUDIO_CFLAGS $ALSA_CFLAGS"
	AC_DEFINE(HAVE_ALSA)
fi
AM_CONDITIONAL(HAVE_ALSA, test x$alsa = xyes)

dnl
dnl Check for LADSPA support
dnl
ACG_PATH_LADSPA([AC_DEFINE(HAVE_LADSPA)])

dnl
dnl UNIX flavours compatibility stuff
dnl

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/file.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_TYPE_OFF_T
AC_STRUCT_ST_BLOCKS
AC_TYPE_SIGNAL
AC_TYPE_PID_T


dnl Check for broken SYSV semaphores
ACG_CHECK_SEMUN
ACG_CHECK_SEMCTL

dnl Check for POSIX semaphores
ACG_CHECK_POSIX_SEMAPHORES

dnl Checks for library functions.
AC_FUNC_MMAP
AC_FUNC_MADVISE
AC_FUNC_ALLOCA


dnl special code hooks for os
case "$host_os" in
*linux*)
	AC_DEFINE(OS_LINUX);;
*bsd*)
	AC_DEFINE(OS_BSD);;
*irix*)
	AC_DEFINE(OS_IRIX);;
esac

dnl
dnl Checks for asm code support
dnl


dnl
dnl Disable fast assembler routines, use slower C code instead.
dnl

AC_ARG_ENABLE(asm,
[  --disable-asm           disable fast assembler routines ], asm=$enableval, asm=yes)

dnl special asm code hooks for cpu -- require GCC.
if test "$asm" = "yes" -a "x$GCC" = "xyes"; then
	case "$host_cpu" in
	i?86)
		AC_DEFINE(CPU_X86);;
	mips*)
		AC_DEFINE(CPU_MIPS);;
	powerpc)
		AC_DEFINE(CPU_PPC);;
	alpha*)
		AC_DEFINE(CPU_ALPHA);;
	esac
fi



dnl
AM_CONDITIONAL(STATICLIBS, test x$enable_static = xyes)

dnl Several subdirs to clean up our own data layout.
pkgpixmapsdir='$(pkgdatadir)/pixmaps'
pkgscriptsdir='$(pkgdatadir)/scripts'

dnl Define install targets pkgpixmaps_FOO and pkgscrips_FOO.
AC_SUBST(pkgpixmapsdir)
AC_SUBST(pkgscriptsdir)

AC_SUBST(GLAME_LIBS)
AC_SUBST(GLAME_CFLAGS)
AC_SUBST(GLAME_DLIBS)
AC_SUBST(GLAME_DCFLAGS)
AC_SUBST(GLAME_AUDIO_LIBS)
AC_SUBST(GLAME_AUDIO_CFLAGS)
AC_SUBST(GLAME_FFT_LIBS)

AC_OUTPUT(Makefile macros/Makefile doc/Makefile data/Makefile data/pixmaps/Makefile src/Makefile src/filter/Makefile src/swapfile/Makefile src/hash/Makefile src/plugins/Makefile src/include/Makefile src/gui/Makefile src/gui/edit_filter/Makefile src/glmid/Makefile src/gui/libgtkwaveform/Makefile)
